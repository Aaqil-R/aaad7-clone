<?php
require("vendor/autoload.php");

function mailchimp_custom_init(){
	//dpm("test");
}

function mailchimp_custom_webform_submission_insert($node, $submission){
	try {
		//dpm($submission->nid);
		// define the mail chimp api key and the list id.
		$api_key = getapikey();
		$list_id = getlistid();
		// extract the parent content type.
		$contenttype = $node->type;
		// initialize and array with the content types we want this to fire for.
		$enabled_content_types = array(
			'events'
			,'courses'
			,'newsletter'
			,'volunteer'
			,'campaigns'
			,'testwebform'
			,'donations'
		);

		//if the webform is one of the 6 the add the test webform content type
		//homepage - are you with us 74666 - done
		//get in touch - 224896
		//join ustoday - 74621 - done
		//events - 74601
		//work for us - 223446 
		//share you story 677426 - in dev
		//share you story 677451 - in staging done
		//share you story 685606 - in live
		$webform_array = array(74666, 224896, 74621 , 74601 , 223446 ,677451 ,685606);
		$webformid = $submission->nid;
		if(in_array($webformid ,$webform_array )){
			$contenttype = 'testwebform';
		}
		// check if we need to fire integrate this webform submission to mail chimp.
		if (in_array($contenttype, $enabled_content_types)) 
		{
			//check the node type we dont need this as we will be looking the webforms from the mailchimp subscription
			//defining the variables
			$email ='';
			$firstname = '';
			$lastname = '';
			$newevent = '';
			$neweventarray = array();
			$phonenumber = '';
			$postcode = '';
			$address = '';
			$address1='';
			$address2='';
			$city = '';
			$country = '';
			$did_subscribe = false;
			$occupation = '';
			$employer = '';
			$date_of_birth = '';
			$pledge = '';
			$offer = '';
			$describe_you = '';
			$age = '';
			$volunteers = '';
			$support = '';
			$update = '';
			$charity_place='';

			$charity_name = 'Apply for charity place';

			// mapping out the webform components by form_key rather than index as this would make the 
			// order in which the elements are added in the webform irrelavant.
			foreach ($node->webform['components'] as $key => $field) 
			{
				switch ($field['form_key']) 
				{
					case 'email':
					case 'email_address':
						$email = $submission->data[$key][0];
					break;
					case 'firstname':
					case 'first_name':
						$firstname = $submission->data[$key][0];
					break;
					case 'lastname':
						$lastname = $submission->data[$key][0];
					break;
					case 'agree_condition':
						$did_subscribe = $submission->data[$key][0];
					break;
					case 'event_name':
						$newevent = $submission->data[$key][0];
						$neweventarray = array($submission->data[$key][0]);
					break;
					case 'node_type':
						$phonenumber = $submission->data[$key][0];
					break;
					case 'post_code':
						$postcode = $submission->data[$key][0];
					break;
					case 'address1':
						$address1 = $submission->data[$key][0];
					break;
					case 'address2':
						$address2 = $submission->data[$key][0];
					break;
					case 'city':
						$city = $submission->data[$key][0];
					break;
					case 'country':
						$country = $submission->data[$key][0];	
					break;
					case 'occupation':
						$occupation = $submission->data[$key][0];	
					break;
					case 'employer':
						$employer = $submission->data[$key][0];	
					break;
					case 'date_of_birth':
						$date_of_birth = $submission->data[$key][0];	
					break;
					case 'pledge':
						$pledge = $submission->data[$key][0];	
					break;
					case 'offer':
						$offer = $submission->data[$key][0];	
					break;
					case 'describe_you':
						$describe_you = $submission->data[$key][0];	
					break;
					case 'age':
						$age = $submission->data[$key][0];	
					break;
					case 'volunteers':
						$volunteers = $submission->data[$key][0];
					break;
					case 'support':
						$support = $submission->data[$key][0];	
					break;
					case 'update':
						$update = $submission->data[$key][0];	
					break;
					case 'charity_place':
						$charity_place = $submission->data[$key][0];	
					break;
				}
			}
			// check if the user has chosen to subscribe to our mailing subscription.
			if($did_subscribe)
			{
				$MailChimp = new \Drewm\MailChimp($api_key);
				//check whether the subscriber is from the list
				$result3 = $MailChimp->call('/lists/member-info', array(
					'id' => $list_id,
				    'emails' => array(
				    	0 => array('email'=>$email))
				    )
				);
				aaa_mailchimp_data_log($result3 , 'List member info API CALL results line no 161');
				if($pledge == 1):
					$pledge = 'I pledge to raise at least Â£250 (exc. Gift Aid) for Ambitious about Autism';
				endif;

				if($offer == 1):
					$offer = 'My employer offer a matched giving scheme';
				endif;

				if($describe_you == 1):
					$describe_you = 'Parent / Carer';
				elseif($describe_you == 2):
					$describe_you = 'Professional';
				elseif($describe_you == 3):
					$describe_you = 'Aged 16-25';
				endif;

				if($support == 1):
					$support = 'I support this campaign.';
				endif;

				if($update == 1):
					$update = 'I would like to receive updates about this campaign.';
				endif;

				//from the result we have to check the success count and if its 0 the we must create a new user or update the exsisting user
				if($result3['success_count'] == 1)
				{
					//if the user exsist then we must get the earlier subscribed events

					$eventlist = print_event_list($result3);
					$events = $eventlist['events'];
					$courses = $eventlist['courses'];
					$news = $eventlist['news'];
					$volunteer = $eventlist['volunteer'];
					$campaigns = $eventlist['campaigns'];
					$donations = $eventlist['donation'];

					//add the charity places when subscribing	
					$applyforCharity = $eventlist['apply_for_charity_place'];
					$IhavemyOwnPlace = $eventlist['i_have_my_own_place'];

					//check for the event type and add the event to the correct array
					if($contenttype == 'events'){
						array_push($events, $newevent);
						//check the conditon which the user has selected. and depending on that update the group that needs to be updated
						if($charity_place == 1){
							array_push($IhavemyOwnPlace, $newevent);
						}
						else{
							array_push($applyforCharity, $newevent);
						}
					}
					elseif($contenttype == 'courses')
					{
						array_push($courses, $newevent);
					}
					elseif($contenttype == 'testwebform' || $contenttype == 'newsletter')
					{
						array_push($news, $newevent);
					}
					elseif($contenttype == 'volunteer')
					{
						array_push($volunteer, $newevent);
					}
					elseif($contenttype == 'campaigns')
					{
						array_push($campaigns, $newevent);
					}
					elseif($contenttype == 'donations')
					{
						array_push($donations, $newevent);
					}
					//Gathering exsisting details.
					if ($lastname == NULL || $lastname == ''){
						$lastname = print_data($result3, 'LNAME');
					}
					if ($phonenumber == NULL || $phonenumber == ''){
						$phonenumber = print_data($result3, 'PHONE');
					}
					if ($postcode == NULL || $postcode == ''){
						$postcode = print_data($result3, 'POSTCODE');
					}
					if ($address1 == NULL || $address1 == ''){
						$address1 = print_data($result3, 'ADDRESS1');
					}
					if ($address2 == NULL || $address2 == ''){
						$address2 = print_data($result3, 'ADDRESS2');
					}
					if ($city == NULL || $city == ''){
						$city = print_data($result3, 'CITY');
					}
					if ($country == NULL || $country == ''){
						$country = print_data($result3, 'COUNTRY');
					}
					if ($occupation == NULL || $occupation == ''){
						$occupation = print_data($result3, 'OCCUPATION');
					}
					if ($employer == NULL || $employer == ''){
						$employer = print_data($result3, 'EMPLOYER');
					}
					if ($date_of_birth == NULL || $date_of_birth == ''){
						$date_of_birth = print_data($result3, 'BIRTH_DAY');
					}
					if ($pledge == NULL || $pledge == ''){
						$pledge = print_data($result3, 'PLEDGE');
					}
					if ($offer == NULL || $offer == ''){
						$offer = print_data($result3, 'OFFER');
					}
					if ($describe_you == NULL || $describe_you == ''){
						$describe_you = print_data($result3, 'DESCRIPTON');
					}
					if ($age == NULL || $age == ''){
						$age = print_data($result3, 'AGE');
					}
					if ($volunteers == NULL || $volunteers == ''){
						$volunteers = print_data($result3, 'VOLUNTEERS');
					}
					if ($support == NULL || $support == ''){
						$support = print_data($result3, 'SUPPORT');
					}
					if ($update == NULL || $update == ''){
						$update = print_data($result3, 'UPDATE');
					}
					//update the current user
					//prepare the submitting data
					$submittingdata = array(
						'id' => $list_id,
					    'email' => array('email'=>$email),
						'merge_vars' => array(
					        'groupings' => array(
					            0 => array(
					                'name' => 'Courses',
					                'groups' => $courses
					                ),
					            1 => array(
					                'name' => 'External newsletter',
					                'groups' => $news
					                ),
					            2 => array(
					                'name' => 'Participation',
					                'groups' => $volunteer
					                ),
					            3 => array(
					                'name' => 'Campaign',
					                'groups' => $campaigns
					                ),
					            4 => array(
					                'name' => 'I Have my Own Place',
					                'groups' => $IhavemyOwnPlace
					                ),
					            5 => array(
					                'name' => 'Apply for charity place',
					                'groups' => $applyforCharity
					                ),
					            6 => array(
					                'name' => 'Donation',
					                'groups' => $donations
					                ),
					            ),
					        'phone'=>$phonenumber,
					        'postcode'=>$postcode,
					        'address1'=>$address1,
					        'address2'=>$address2,
					        'city'=>$city,
					        'country'=>$country,
					        'occupation'=>$occupation,
					        'employer'=>$employer,
					        'birth_day'=>$date_of_birth,
					        'descripton'=>$describe_you,
					        'age'=>$age,
					        'volunteers'=>$volunteers,
					        'support'=>$support,
					        'update'=>$update
					        ),
					   	'double_optin' => true,
					    'update_existing' => true,
					    'replace_interests' => true,
					    'send_welcome' => false,
					    );
					$result = $MailChimp->call('/lists/update-member', $submittingdata);
					aaa_mailchimp_data_log($submittingdata , 'List Update member API CALL results line no 343');
					aaa_mailchimp_data_log($result , 'List Update member API CALL results line no 344');
				}
				else
				{
					$name = '';
					if($contenttype == 'events'){
						if($charity_place == 1){
							$name = 'I Have my Own Place';
						}
						else{
							$name = 'Apply for charity place';
						}
					}
					elseif($contenttype == 'courses')
					{
						$name = 'Courses';
					}

					elseif($contenttype == 'testwebform' || $contenttype == 'newsletter')
					{
						$name = 'External newsletter';
					}
					elseif($contenttype == 'volunteer')
					{
						$name = 'Participation';
					}
					elseif($contenttype == 'campaigns')
					{
						$name = 'Campaign';
					}
					elseif($contenttype == 'donations')
					{
						$name = 'Donation';
					}
					$submittingdata = array(
					    'id' => $list_id,
					    'email' => array('email'=>$email),
					    'merge_vars' => array(
					    	'fname'=>$firstname, 
					        'lname'=>$lastname,
					        'groupings' => array(
					            0 => array(
					                'name' => $name,
					                'groups' => $neweventarray
					                ),
					            ),
					        'phone'=>$phonenumber,
					        'postcode'=>$postcode,
					        'address1'=>$address1,
					        'address2'=>$address2,
					        'city'=>$city,
					        'country'=>$country,
					        'occupation'=>$occupation,
					        'employer'=>$employer,
					        'birth_day'=>$date_of_birth,
					        'pledge'=>$pledge,
					        'offer'=>$offer,
					        'descripton'=>$describe_you,
					        'age'=>$age,
					        'volunteers'=>$volunteers,
					        'support'=>$support,
					        'update'=>$update
					        ),
					    'double_optin'      => true,
					    'update_existing'   => true,
					    'replace_interests' => true,
					    'send_welcome'      => false,
					    );

					$result = $MailChimp->call('lists/subscribe', $submittingdata);
					aaa_mailchimp_data_log($submittingdata , 'List Subscribe API CALL results line no 414');
					aaa_mailchimp_data_log($result , 'List Subscribe API CALL results line no 415');
				}

				if(isset($result['error'])){
					$test = serialize($submittingdata);
					$record = array(
	    				"resultset" => $test,
	    				"error" => $result['error'],
	    				"errortime" => time(),
	    			);
	  				drupal_write_record('mailchimp_error_log', $record);
				}
				else{
				}
			}
			if($contenttype == 'events'){
				if($charity_place == 1){
					/*Looks like this is the place where the emails being sent are failing. */
					// drupal_goto('event-registration-submitted');
				}
			}
		}
	} catch (Exception $e) {
		aaa_mailchimp_data_log($e , 'Mailchimp custom webform submission insert Failed due to exception');
  }	
}

function print_event_list($result3){
	$total_events = array();
	//gather the subscribed list from the result
	$subscribed_groups_list = $result3['data']['0']['merges']['GROUPINGS'];
	foreach ($subscribed_groups_list as $group) {
		$subscribed_list = $group['groups'];
		//$subscribed_list_name = $group['name'];
		if($group['name'] == 'Fundraising'){
			$subscribed_events = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Courses'){
			$subscribed_courses = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'External newsletter'){
			$subscribed_news = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Participation'){
			$subscribed_volunteers = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Campaign'){
			$subscribed_campaign = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Apply for charity place'){
			$subscribed_applycharityplace = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'I Have my Own Place'){
			$subscribed_owncharityplace = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Donation'){
			$subscribed_donations = get_subscribed_events($subscribed_list);
		}
	}
	$total_events['events']=$subscribed_events;
	$total_events['courses']=$subscribed_courses;
	$total_events['news']=$subscribed_news;
	$total_events['volunteer']=$subscribed_volunteers;
	$total_events['campaigns']=$subscribed_campaign;
	$total_events['apply_for_charity_place']=$subscribed_applycharityplace;
	$total_events['i_have_my_own_place']=$subscribed_owncharityplace;
	$total_events['donation']=$subscribed_donations;
	return $total_events;
}

function print_data($result3, $var){
	$data = $result3['data']['0']['merges'][$var];
	return $data;
}

//by sending the event type we can get the actual events with that to which user has subscribed.
function get_subscribed_events($array){
	$subscribed_events = array();
	foreach ($array as $event) {
		//if the user has already subscribed to a list the add them to an array
		if($event['interested'] == 1){
			//these are the already subscribed events of the user
			array_push($subscribed_events, $event['name']);
		}
	}
	return $subscribed_events;
}

function mailchimp_custom_node_insert($node){
	//getting the node title
	$title = $node->title;
	//defining the creating content type
	$contenttype = $node->type;
	$enabled_content_types = array(
		'events'
		,'courses'
		,'newsletter'
		,'volunteer'
		,'campaigns'
		,'testwebform'
		,'donations'
	);
	
	if (in_array($contenttype, $enabled_content_types)) 
	{
		$event_code = field_get_items('node', $node, 'field_event_code');
		$event_code1 = $event_code[0]['value'];
		//check which type node this is events or courses
		if($node->type == 'events' || $node->type == 'courses')
		{	
			if($event_code1 == ''){
				//update the code to generate the event code
				$eventdate = field_get_items('node', $node, 'field_event_date');
				$eventdate1 = $eventdate[0]['value'];
				$eventcode = date('dmy',$eventdate1);
				$event_code1 = $title.$eventcode;
			}
		}
		//this is for the other three content types
		else{
			if($event_code1 == ''){
				$event_code1 = $node->created;
				$eventcode = date('dmy',$event_code1);
				$event_code1 = $title.$eventcode;
			}
		}
		//check whether the webform is enabled for the content
		if(isset($node->webform['nid']))
		{
			$api_key = getapikey();			
			$list_id = getlistid();

			//write the code when the content has the webform enabled.
			$MailChimp = new \Drewm\MailChimp($api_key);
			
			$groupid = getresults($contenttype);
			if($groupid != ''){
				//subscribing to a group
				$submittingdata = array(
					'apikey' => $api_key,
					'id' => $list_id,
					'group_name' => $event_code1,
					'grouping_id' => $groupid,
					);
				$result = $MailChimp->call('lists/interest-group-add', $submittingdata);
				//dpm($result);

				//testing the field
				$node->original = isset($node->original) ? $node->original : NULL; 
				$node->field_event_code[$node->language][0]['value'] = $event_code1;      
				field_attach_update('node', $node);
			}

			//put the events codes with an if condition in this place where when an event is created two groups to be created.
			if($contenttype == 'events'){
				//get the new group ids
				$charityid1 = getresultsofCharityPlace(1);
				//create the group in I have my own place
				$submittingdata1 = array(
					'apikey' => $api_key,
					'id' => $list_id,
					'group_name' => $event_code1,
					'grouping_id' => $charityid1,
					);
				$result1 = $MailChimp->call('lists/interest-group-add', $submittingdata1);
				//get the new group ids
				$charityid2 = getresultsofCharityPlace(2);
				//create the group in Apply for charity place
				$submittingdata2 = array(
					'apikey' => $api_key,
					'id' => $list_id,
					'group_name' => $event_code1,
					'grouping_id' => $charityid2,
					);
				$result2 = $MailChimp->call('lists/interest-group-add', $submittingdata2);				
			}

		}
		else{
		}
	}
}

//update code for the group name when changing 
function mailchimp_custom_node_update($node){
	//getting the values before the editing.
	$title = $node->title;

	$loaded_node = node_load($node->nid);
	$earliervalue = field_get_items('node', $loaded_node, 'field_event_code');
	$updatedvalue = field_get_items('node', $node, 'field_event_code');

	$earliervalue1 = $earliervalue[0]['value'];
	$updatedvalue1 = $updatedvalue[0]['value'];	 
	//check which type node this is events or courses
	if($node->type == 'events' || $node->type == 'courses')
	{	
		if($updatedvalue1 == ''){
	//update the code to generate the event code
			$eventdate = field_get_items('node', $node, 'field_event_date');
			$eventdate1 = $eventdate[0]['value'];
			$eventcode = date('dmy',$eventdate1);
			$updatedvalue1 = $title.$eventcode;
			$node->field_event_code[$node->language][0]['value'] = $updatedvalue1;      
			field_attach_update('node', $node);
		}
	}
	//this is for the other three content types
	else{
		if($updatedvalue1 == ''){
			$updatedvalue1 = $node->created;
			$eventcode = date('dmy',$updatedvalue1);
			$updatedvalue1 = $title.$eventcode;
			$node->field_event_code[$node->language][0]['value'] = $updatedvalue1;      
			field_attach_update('node', $node);
		}
	}
	// //defining the creating content type
	$contenttype = $node->type;
	$enabled_content_types = array(
		'events'
		,'courses'
		,'newsletter'
		,'volunteer'
		,'campaigns'
		,'testwebform'
		,'donations'
	);
	
	if (in_array($contenttype, $enabled_content_types)) 
	{
		//check whether the webform is enabled for the content
		if(isset($node->webform['nid']))
		{
			//write the code when the content has the webform enabled.
			//getting the node title
			$title = $node->title;

			$api_key = getapikey();			
			$list_id = getlistid();

			//write the code when the content has the webform enabled.
			$MailChimp = new \Drewm\MailChimp($api_key);

			$groupid = getresults($contenttype);

			if($groupid != ''){
				//updating the group name
				$submittingdata = array(
					'apikey' => $api_key,
					'id' => $list_id,
					'old_name' => $earliervalue1,
					'new_name' => $updatedvalue1,
					'grouping_id' => $groupid,
					);
				$result = $MailChimp->call('lists/interest-group-update', $submittingdata);
			}
			//put the events codes with an if condition in this place where when an event is updated two groups to be updated.
			if($contenttype == 'events'){
				//updating the groups here
				$charityid1 = getresultsofCharityPlace(1);
				//Updating the I have my own place name
				$submittingdata1 = array(
					'apikey' => $api_key,
					'id' => $list_id,
					'old_name' => $earliervalue1,
					'new_name' => $updatedvalue1,
					'grouping_id' => $charityid1,
					);
				$result1 = $MailChimp->call('lists/interest-group-update', $submittingdata1);
				//Updating the Apply for the charity place
				$charityid2 = getresultsofCharityPlace(2);

				$submittingdata2 = array(
					'apikey' => $api_key,
					'id' => $list_id,
					'old_name' => $earliervalue1,
					'new_name' => $updatedvalue1,
					'grouping_id' => $charityid2,
					);
				$result2 = $MailChimp->call('lists/interest-group-update', $submittingdata2);		
				//dpm($result2);		
			}
		}
		else{
			//write code when the webform is not set
		}
	}
}

function getresults($contenttype){
	$api_key = getapikey();			
	$list_id = getlistid();

	//write the code when the content has the webform enabled.
	$MailChimp = new \Drewm\MailChimp($api_key);

	$getdata = array(
		'apikey' => $api_key,
		'id' => $list_id,
	);
	$result = $MailChimp->call('lists/interest-groupings', $getdata);

	$key = '';
	$id = '';
	switch ($contenttype) {
    case "courses":
        $key = array_search('Courses', array_column($result, 'name'));
        break;
    case "events":
        $key = array_search('Fundraising', array_column($result, 'name'));
        break;
    case "newsletter":
        $key = array_search('External newsletter', array_column($result, 'name'));
        break;
    case "volunteer":
    	$key = array_search('Participation', array_column($result, 'name'));
    break;
    case "campaigns":
    	$key = array_search('Campaign', array_column($result, 'name'));
    break;
    case "donations":
    	$key = array_search('Donation', array_column($result, 'name'));
    break;
	}

	if(isset($key)){
		$id = $result[$key]['id'];	
	}
	return $id;
}

function getresultsofCharityPlace($num){
	$api_key = getapikey();			
	$list_id = getlistid();

	//write the code when the content has the webform enabled.
	$MailChimp = new \Drewm\MailChimp($api_key);
	
	$getdata = array(
		'apikey' => $api_key,
		'id' => $list_id,
	);
	$result = $MailChimp->call('lists/interest-groupings', $getdata);
	$key = '';
	$id = '';

	if($num == 1)
	{
		$key = array_search('I Have my Own Place', array_column($result, 'name'));
	}
	elseif($num == 2){
		$key = array_search('Apply for charity place', array_column($result, 'name'));
	}
	if(isset($key)){
		$id = $result[$key]['id'];	
	}
	return $id;
}

function getapikey(){
	//698807ce039f92ea3b417de902be2a94-us11
	return 'bf21163729b1e6cb5aa665fe837b6586-us11';
}

function getlistid(){
	// return '821dc7ebcb';
	//below one is the live id
	//when update uncomment the below line and comment the earlier id
	// name of this list is "Ambitious list"
	return '82ee1f4953';
}

//new codes

function mailchimp_custom_node_validate($node, $form, &$form_state){
	//checking the content type
	$contenttype = $node->type;
	$enabled_content_types = array(
		'events'
		,'courses'
	);
	//check whether the content type belongs to one defined in array
	if (in_array($contenttype, $enabled_content_types)){
		//load the bsd field
		$items = field_get_items('node', $node, 'field_bsd_tools_integration');
		$first_value = $items[0]['value'];
		//check whether the string is null if so we do not need to consider the scenario
		if($first_value != ''){
			//check whether the string starts with http.
			//this will cover https also
			if(substr( $first_value, 0, 4 ) != "http")
			{
				//throw a form validation error when the string does not start with http
				form_set_error('field_bsd_tools_integration', t('Please add the link with http://'));
			}
		}
		
	}
}

/**
 * Add new Table for further logs.
 */
function mailchimp_custom_update_7101() {
  $schema['aaa_logger_mailchimp'] = array(
    'description' => 'AAA Mailchimp Debug logger',
    'fields' => array(
      'ID' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'data' => array('type' => 'text', 'size' => 'medium', 'not null' => False),
      'timestamp' => array('type' => 'text', 'size' => 'medium', 'not null' => TRUE),
      'customessage' => array('type' => 'text', 'size' => 'medium', 'not null' => False),
    ),
    'primary key' => array('ID'),
  );
  db_create_table('aaa_logger_mailchimp', $schema['aaa_logger_mailchimp']);
}

//Logging the transactions and the results in a Database
function aaa_mailchimp_data_log($data , $customessage){
	$datarecord = array(
  	"data" => serialize($data),
  	"timestamp" => time(),
  	"customessage" => $customessage,
  );
	drupal_write_record('aaa_logger_mailchimp', $datarecord);
}

?>