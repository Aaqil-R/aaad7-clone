<?php
require("vendor/autoload.php");



function mailchimp_custom_init(){
	//to see the list id.
	// $MailChimp = new \Drewm\MailChimp('698807ce039f92ea3b417de902be2a94-us11');
	// $result1 = $MailChimp->call('/lists/list');
	// dpm($result1);
	// $result3 = $MailChimp->call('/lists/member-info', array(
	// 			'id' => '20af80b11d',
	// 		    'emails' => array(
	// 		    	0 => array('email'=>'nishan@thesmallaxe.com'))
	// 		    )
	// 		);

	//dpr($result3);
	 // $record = array(
  //   "resultset" => 'this is a test to see',
  //   );
  // drupal_write_record('mailchimp_error_log', $record);
  // dpm($record);

}

function mailchimp_custom_webform_submission_insert($node, $submission){

	//dpm($submission->nid);
	// define the mail chimp api key and the list id.
	$api_key = '698807ce039f92ea3b417de902be2a94-us11';
	$list_id = '20af80b11d';

	// extract the parent content type.
	$contenttype = $node->type;
	//dpm($contenttype);
	// initialize and array with the content types we want this to fire for.
	$enabled_content_types = array(
		'event'
		,'course'
		,'newsletter'
		,'volunteer'
		,'campaigns'
		,'testwebform'
	);

	//if the webform is one of the 6 the add the test webform content type
	//homepage - are you with us 74666 - done
	//get in touch - 224896
	//join ustoday - 74621 - done
	//events - 74601
	//work for us - 223446 
	//share you story 677426 - done
	$webform_array = array(74666, 224896, 74621 , 74601 , 223446 ,677426);
	$webformid = $submission->nid;
	if(in_array($webformid ,$webform_array )){
		$contenttype = 'testwebform';
	}
	// check if we need to fire integrate this webform submission to mail chimp.
	if (in_array($contenttype, $enabled_content_types)) 
	{

		//check the node type we dont need this as we will be looking the webforms from the mailchimp subscription
		//dpm($submission);
	
		//must check whether the user ticked the mailchimp option and the send the request
	
		//defining the variables
		$email ='';
		$firstname = '';
		$lastname = '';
		$newevent = '';
		$neweventarray = array();
		//new code set
		$phonenumber = '';
		$postcode = '';
		$address = '';
		$city = '';
		$country = '';
		$did_subscribe = false;
		$occupation = '';
		$employer = '';
		$date_of_birth = '';
		$pledge = '';
		$offer = '';
		$describe_you = '';
		$age = '';
		$volunteers = '';
		$support = '';
		$update = '';


		// mapping out the webform components by form_key rather than index as this would make the 
		// order in which the elements are added in the webform irrelavant.
		// TODO: need to clean up this code; maybe have a webform wrapper object which would initialize
		// a hashmap.
		foreach ($node->webform['components'] as $key => $field) 
		{
			// debug statements
			// dpm($field['form_key']);
			// dpm($submission->data[$key][0]);

			switch ($field['form_key']) 
			{
				case 'email':
				case 'email_address':
					$email = $submission->data[$key][0];
				break;
				case 'firstname':
				case 'first_name':
					$firstname = $submission->data[$key][0];
				break;
				case 'lastname':
					$lastname = $submission->data[$key][0];
				break;
				case 'agree_condition':
					$did_subscribe = $submission->data[$key][0];
				break;
				case 'event_name':
					$newevent = $submission->data[$key][0];
					$neweventarray = array($submission->data[$key][0]);
					// dpm('Event array is');
					// dpm($neweventarray);
					//dpm($newevent);

				break;
				case 'node_type':
					$phonenumber = $submission->data[$key][0];
				break;
				case 'post_code':
					$postcode = $submission->data[$key][0];
				break;
				case 'address1':
					$address1 = $submission->data[$key][0];
				break;
				case 'address2':
					$address2 = $submission->data[$key][0];
				break;
				case 'city':
					$city = $submission->data[$key][0];
				break;
				case 'country':
					$country = $submission->data[$key][0];	
				break;
				case 'occupation':
					$occupation = $submission->data[$key][0];	
				break;
				case 'employer':
					$employer = $submission->data[$key][0];	
				break;
				case 'date_of_birth':
					$date_of_birth = $submission->data[$key][0];	
				break;
				case 'pledge':
					$pledge = $submission->data[$key][0];	
				break;
				case 'offer':
					$offer = $submission->data[$key][0];	
				break;
				case 'describe_you':
					$describe_you = $submission->data[$key][0];	
				break;
				case 'age':
					$age = $submission->data[$key][0];	
				break;
				case 'volunteers':
					$volunteers = $submission->data[$key][0];
				break;
				case 'support':
					$support = $submission->data[$key][0];	
				break;
				case 'update':
					$update = $submission->data[$key][0];	
				break;
			}

			// dpm('Event array here is');
			// dpm($neweventarray);
			// email
			// firstname
			// lastname
			// agree_condition
			// event_name
			// node_type
			// post_code
			// address1
			// address2
			// city
			// country
		}
		//end of the new code set

		//$nid = $node->nid;		
		//dpm($node);
		// $contenttype = $node->type;
		//$contenttype = 'courses';

		//dpm($contenttype);
		//dpm('I am here');
		// check if the user has chosen to subscribe to our mailing subscription.
		if($did_subscribe)
		{
			//dpm('i came here');
			//dpm('enabled');
			//replace api with the clients api
			//$MailChimp = new \Drewm\MailChimp('cd1f99363f8227c11b3130efb6039c31-us11');

			// initialize the mail chimp API.
			// TODO: this is using API version 2 which is deprecated.
			$MailChimp = new \Drewm\MailChimp($api_key);
			
			//we have to get the event type and the event name to which user has subscribed
			//assign the new event to relevent webform value

			//new codes
			//to see the lists on the view
			// $result1 = $MailChimp->call('/lists/interest-groupings' , array(
			//                 		'id' => '1430d8d688'));

			//check whether the subscriber is from the list
			$result3 = $MailChimp->call('/lists/member-info', array(
				'id' => $list_id,
			    'emails' => array(
			    	0 => array('email'=>$email))
			    )
			);

		//get the earlier values of the events
		//print_r(print_event_list($result3));

		//dpm($condition);

			if($pledge == 1):
				$pledge = 'I pledge to raise at least Â£250 (exc. Gift Aid) for Ambitious about Autism';
			endif;

			if($offer == 1):
				$offer = 'My employer offer a matched giving scheme';
			endif;

			if($describe_you == 1):
				$describe_you = 'Parent / Carer';
			elseif($describe_you == 2):
				$describe_you = 'Professional';
			elseif($describe_you == 3):
				$describe_you = 'Aged 16-25';
			endif;

			if($support == 1):
				$support = 'I support this campaign.';
			endif;

			if($update == 1):
				$update = 'I would like to receive updates about this campaign.';
			endif;


			//from the result we have to check the success count and if its 0 the we must create a new user or update the exsisting user
			if($result3['success_count'] == 1)
			{
				//if the user exsist then we must get the earlier subscribed events
				$eventlist = print_event_list($result3);
				$events = $eventlist['events'];
				$courses = $eventlist['courses'];
				$news = $eventlist['news'];
				$volunteer = $eventlist['volunteer'];
				$campaigns = $eventlist['campaigns'];

				//dpm($eventlist);
				//check for the event type and add the event to the correct array
				if($contenttype == 'event'){
					//dpm("i am a event");
					array_push($events, $newevent);
				}
				elseif($contenttype == 'course')
				{
					// dpm("i am a course");
					array_push($courses, $newevent);
				}
				elseif($contenttype == 'testwebform' || $contenttype == 'newsletter')
				{
					// dpm("i am a course");
					array_push($news, $newevent);
					//dpm('lalalala');
				}
				//newset of codes
				elseif($contenttype == 'volunteer')
				{
					// dpm("i am a volunteer");
					array_push($volunteer, $newevent);
				}
				elseif($contenttype == 'campaigns')
				{
					// dpm("i am a course");
					array_push($campaigns, $newevent);
				}
				//Gathering exsisting details.
				if ($lastname == NULL || $lastname == ''){
					$lastname = print_data($result3, 'LNAME');
				}
				if ($phonenumber == NULL || $phonenumber == ''){
					$phonenumber = print_data($result3, 'PHONE');
				}
				if ($postcode == NULL || $postcode == ''){
					$postcode = print_data($result3, 'POSTCODE');
				}
				if ($address1 == NULL || $address1 == ''){
					$address1 = print_data($result3, 'ADDRESS1');
				}
				if ($address2 == NULL || $address2 == ''){
					$address2 = print_data($result3, 'ADDRESS2');
				}
				if ($city == NULL || $city == ''){
					$city = print_data($result3, 'CITY');
				}
				if ($country == NULL || $country == ''){
					$country = print_data($result3, 'COUNTRY');
				}
				if ($occupation == NULL || $occupation == ''){
					$occupation = print_data($result3, 'OCCUPATION');
				}
				if ($employer == NULL || $employer == ''){
					$employer = print_data($result3, 'EMPLOYER');
				}
				if ($date_of_birth == NULL || $date_of_birth == ''){
					$date_of_birth = print_data($result3, 'BIRTH_DAY');
				}
				if ($pledge == NULL || $pledge == ''){
					$pledge = print_data($result3, 'PLEDGE');
				}
				if ($offer == NULL || $offer == ''){
					$offer = print_data($result3, 'OFFER');
				}
				if ($describe_you == NULL || $describe_you == ''){
					$describe_you = print_data($result3, 'DESCRIPTON');
				}
				if ($age == NULL || $age == ''){
					$age = print_data($result3, 'AGE');
				}
				if ($volunteers == NULL || $volunteers == ''){
					$volunteers = print_data($result3, 'VOLUNTEERS');
				}
				if ($support == NULL || $support == ''){
					$support = print_data($result3, 'SUPPORT');
				}
				if ($update == NULL || $update == ''){
					$update = print_data($result3, 'UPDATE');
				}


				//update the current user

				//prepare the submitting data
				$submittingdata = array(
					'id' => $list_id,
				    'email' => array('email'=>$email),
					'merge_vars' => array(
				        'groupings' => array(
				            0 => array(
				                'name' => 'Events',
				                'groups' => $events
				                ),

				            1 => array(
				                'name' => 'Courses',
				                'groups' => $courses
				                ),

				            2 => array(
				                'name' => 'Newsletters',
				                'groups' => $news
				                ),
				            3 => array(
				                'name' => 'Volunteer',
				                'groups' => $volunteer
				                ),
				            4 => array(
				                'name' => 'Campaign',
				                'groups' => $campaigns
				                ),
				            ),
				        'phone'=>$phonenumber,
				        'postcode'=>$postcode,
				        'address1'=>$address1,
				        'address2'=>$address2,
				        'city'=>$city,
				        'country'=>$country,
				        'occupation'=>$occupation,
				        'employer'=>$employer,
				        'birth_day'=>$date_of_birth,
				        'pledge'=>$pledge,
				        'offer'=>$offer,
				        'descripton'=>$describe_you,
				        'age'=>$age,
				        'volunteers'=>$volunteers,
				        'support'=>$support,
				        'update'=>$update
				        ),
				   	'double_optin' => true,
				    'update_existing' => true,
				    'replace_interests' => true,
				    'send_welcome' => false,
				    );

				$result = $MailChimp->call('/lists/update-member', $submittingdata);
				//dpm($result);
				//dpm("I came here also");
			}
			else
			{
				echo "user not found";
				//bit of modification done from the normal way. in order to add the new user
				$name = '';
				if($contenttype == 'event'){
					$name = 'Events';
				}
				elseif($contenttype == 'course')
				{
					// dpm("i am a course");
					$name = 'Courses';
				}

				elseif($contenttype == 'testwebform' || $contenttype == 'newsletter')
				{
					$name = 'Newsletters';
				}
				elseif($contenttype == 'volunteers')
				{
					$name = 'Volunteer';
				}
				elseif($contenttype == 'campaigns')
				{
					$name = 'Campaign';
				}
				//create a new user

				//creating the date to be sent

				$submittingdata = array(
				    'id' => $list_id,
				    'email' => array('email'=>$email),
				    'merge_vars' => array(
				    	'fname'=>$firstname, 
				        'lname'=>$lastname,
				        'groupings' => array(
				            0 => array(
				                'name' => $name,
				                'groups' => $neweventarray
				                )
				            ),
				        'phone'=>$phonenumber,
				        'postcode'=>$postcode,
				        'address1'=>$address1,
				        'address2'=>$address2,
				        'city'=>$city,
				        'country'=>$country,
				        'occupation'=>$occupation,
				        'employer'=>$employer,
				        'birth_day'=>$date_of_birth,
				        'pledge'=>$pledge,
				        'offer'=>$offer,
				        'descripton'=>$describe_you,
				        'age'=>$age,
				        'volunteers'=>$volunteers,
				        'support'=>$support,
				        'update'=>$update
				        ),
				    'double_optin'      => true,
				    'update_existing'   => true,
				    'replace_interests' => true,
				    'send_welcome'      => false,
				    );

				$result = $MailChimp->call('lists/subscribe', $submittingdata);


				// $record = array(
    // 				"resultset" => 'this is the test',
    // 			);
  		// 		drupal_write_record('mailchimp_error_log', $submittingdata);
  		// 		dpm($record);
			}
		//end of the new codes
			//dpm($result);

			if(isset($result['error'])){
				//dpm('I have an error');
				//log the result for the error
				// watchdog('Mailchimp_custom', 
				// 		'Failed to update to mailcimp the user %firstname to %lastname', 
    //      			array('%firstname' => $firstname, 
    //      				'%lastname' => $lastname, 
    //      				WATCHDOG_ERROR));
				//dpm('I am an error');
				//dpm($result);
				//adding it to the database

				$test = serialize($submittingdata);
				$record = array(
    				"resultset" => $test,
    			);
  				drupal_write_record('mailchimp_error_log', $record);


  				//dpm($record);
			}
			else{
				//dpm('Successfull');
			}
		}
		else
		{
		//dpm('disabled');
		}
	}	
}

function print_event_list($result3){
	$total_events = array();
	//gather the subscribed list from the result
	$subscribed_groups_list = $result3['data']['0']['merges']['GROUPINGS'];
	foreach ($subscribed_groups_list as $group) {
		$subscribed_list = $group['groups'];
		//$subscribed_list_name = $group['name'];
		if($group['name'] == 'Events'){
			$subscribed_events = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Courses'){
			$subscribed_courses = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Newsletters'){
			$subscribed_news = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Volunteer'){
			$subscribed_volunteers = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Campaign'){
			$subscribed_campaign = get_subscribed_events($subscribed_list);
		}
	}
	$total_events['events']=$subscribed_events;
	$total_events['courses']=$subscribed_courses;
	$total_events['news']=$subscribed_news;
	$total_events['volunteer']=$subscribed_volunteers;
	$total_events['campaigns']=$subscribed_campaign;
	//print_r($total_events);
	return $total_events;
};

function print_data($result3, $var){
	$data = $result3['data']['0']['merges'][$var];
	return $data;
}

//by sending the event type we can get the actual events with that to which user has subscribed.
function get_subscribed_events($array){
	$subscribed_events = array();
	foreach ($array as $event) {
		//if the user has already subscribed to a list the add them to an array
		if($event['interested'] == 1){
			//these are the already subscribed events of the user
			array_push($subscribed_events, $event['name']);
		}
	}
	return $subscribed_events;
};

//get the first name , lastname , phone number , post code , address , city , country
// function print_event_list($result3){
// 	//gather the subscribed list from the result
// 	$subscribed_groups_list = $result3['data']['0']['merges']['GROUPINGS'];
// 	//print_r($total_events);
// 	return $total_events;
// };


?>