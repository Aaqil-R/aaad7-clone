<?php
require("vendor/autoload.php");



function mailchimp_custom_init(){
	//to see the list id.
	// $MailChimp = new \Drewm\MailChimp('698807ce039f92ea3b417de902be2a94-us11');
	// $result1 = $MailChimp->call('/lists/list');
	// dpm($result1);

}

function mailchimp_custom_webform_submission_insert($node, $submission){

	$api_key = '698807ce039f92ea3b417de902be2a94-us11';
	$list_id = '20af80b11d';

	//check the node type we dont need this as we will be looking the webforms from the mailchimp subscription
	//dpm($submission);
	

	//must check whether the user ticked the mailchimp option and the send the request
	
	//defining the variables
	$email ='';
	$firstname = '';
	$lastname = '';
	$newevent = '';
	$neweventarray = array();
	//new code set
	$phonenumber = '';
	$postcode = '';
	$address = '';
	$city = '';
	$country = '';
	$did_subscribe = false;

	foreach ($node->webform['components'] as $key => $field) {

		//dpm($field['form_key']);
		//dpm($submission->data[$key][0]);

		switch ($field['form_key']) {
			case 'email':
				$email = $submission->data[$key][0];
			break;
			case 'firstname':
				$firstname = $submission->data[$key][0];
			break;
			case 'lastname':
				$lastname = $submission->data[$key][0];
			break;
			case 'agree_condition':
				$did_subscribe = $submission->data[$key][0];
			break;
			case 'event_name':
				$newevent = $submission->data[$key][0];
				$neweventarray = array($submission->data[$key][0]);
			break;
			case 'node_type':
				$phonenumber = $submission->data[$key][0];
			break;
			case 'post_code':
				$postcode = $submission->data[$key][0];
			break;
			case 'address1':
				$address1 = $submission->data[$key][0];
			break;
			case 'address2':
				$address2 = $submission->data[$key][0];
			break;
			case 'city':
				$city = $submission->data[$key][0];
			break;
			case 'country':
				$country = $submission->data[$key][0];	
			break;
			case 'occupation':
				$occupation = $submission->data[$key][0];	
			break;
			case 'employer':
				$employer = $submission->data[$key][0];	
			break;
			case 'date_of_birth':
				$date_of_birth = $submission->data[$key][0];	
			break;
			case 'condition':
				$condition = $submission->data[$key][0];	
			break;
			case 'i_am_a':
				$i_am_a = $submission->data[$key][0];	
			break;
			case 'age':
				$age = $submission->data[$key][0];	
			break;
			case 'volunteer':
				$volunteer = $submission->data[$key][0];	
			break;
			case 'support_and_update':
				$support_and_update = $submission->data[$key][0];	
			break;
		}

		// email
		// firstname
		// lastname
		// agree_condition
		// event_name
		// node_type
		// post_code
		// address1
		// address2
		// city
		// country
	}
	//end of the new code set

		//$nid = $node->nid;
		//dpm($node);
		$contenttype = $node->type;
		//$contenttype = 'courses';

		//dpm($contenttype);

		if($did_subscribe){
		//dpm('enabled');
		//replace api with the clients api
		//$MailChimp = new \Drewm\MailChimp('cd1f99363f8227c11b3130efb6039c31-us11');
			$MailChimp = new \Drewm\MailChimp($api_key);
		//we have to get the event type and the event name to which user has subscribed
		//assign the new event to relevent webform value

		//new codes
		//to see the lists on the view
		// $result1 = $MailChimp->call('/lists/interest-groupings' , array(
		//                 		'id' => '1430d8d688'));

		//check whether the subscriber is from the list
		$result3 = $MailChimp->call('/lists/member-info', array(
			'id' => $list_id,
		    'emails' => array(
		    	0 => array('email'=>$email))
		    )
		);

		//get the earlier values of the events
		//print_r(print_event_list($result3));

		//from the result we have to check the success count and if its 0 the we must create a new user or update the exsisting user
		if($result3['success_count'] == 1)
		{
			//if the user exsist then we must get the earlier subscribed events
			$eventlist = print_event_list($result3);
			$events = $eventlist['events'];
			$courses = $eventlist['courses'];
			$news = $eventlist['news'];
			$volunteer = $eventlist['volunteer'];
			$campaigns = $eventlist['campaigns'];

			//dpm($eventlist);
			//check for the event type and add the event to the correct array
			if($contenttype == 'event'){
				//dpm("i am a event");
				array_push($events, $newevent);
			}
			elseif($contenttype == 'course')
			{
				// dpm("i am a course");
				array_push($courses, $newevent);
			}
			elseif($contenttype == 'webform' || $contenttype == 'newsletter')
			{
				// dpm("i am a course");
				array_push($news, $newevent);
			}
			//newset of codes
			elseif($contenttype == 'volunteer')
			{
				// dpm("i am a volunteer");
				array_push($volunteer, $newevent);
			}
			elseif($contenttype == 'campaigns')
			{
				// dpm("i am a course");
				array_push($campaigns, $newevent);
			}
			//update the current user
			$result = $MailChimp->call('/lists/update-member', array(
				'id' => $list_id,
			    'email' => array('email'=>$email),
				'merge_vars' => array(
			        'groupings' => array(
			            0 => array(
			                'name' => 'Events',
			                'groups' => $events
			                ),

			            1 => array(
			                'name' => 'Courses',
			                'groups' => $courses
			                ),

			            2 => array(
			                'name' => 'News Letters',
			                'groups' => $news
			                ),
			            3 => array(
			                'name' => 'Volunteer',
			                'groups' => $volunteer
			                ),
			            4 => array(
			                'name' => 'Campaign',
			                'groups' => $campaigns
			                ),
			            ),
			        'phone'=>$phonenumber,
			        'postcode'=>$postcode,
			        'address1'=>$address1,
			        'address2'=>$address2,
			        'city'=>$city,
			        'country'=>$country,
			        'occupation'=>$occupation,
			        'employer'=>$employer,
			        'birth_day'=>$date_of_birth,
			        'conditions'=>$condition,
			        'descripton'=>$i_am_a,
			        'age'=>$age,
			        'volunteer'=>$volunteer,
			        'support_up'=>$support_and_update
			        ),
			   	'double_optin' => true,
			    'update_existing' => true,
			    'replace_interests' => true,
			    'send_welcome' => false,
			    )
			);
				//dpm($result);

			//dpm("I came here also");
		}
		else{
			echo "user not found";
			//bit of modification done from the normal way. in order to add the new user
			$name = '';
			if($contenttype == 'event'){
				$name = 'Events';
			}
			elseif($contenttype == 'course')
			{
				// dpm("i am a course");
				$name = 'Courses';
			}

			elseif($contenttype == 'webform' || $contenttype == 'newsletter')
			{
				$name = 'News Letters';
			}
			elseif($contenttype == 'volunteers')
			{
				$name = 'Volunteer';
			}
			elseif($contenttype == 'campaigns')
			{
				$name = 'Campaign';
			}
			//create a new user
			$result = $MailChimp->call('lists/subscribe', array(
			    'id' => $list_id,
			    'email' => array('email'=>$email),
			    'merge_vars' => array(
			    	'fname'=>$firstname, 
			        'lname'=>$lastname,
			        'groupings' => array(
			            0 => array(
			                'name' => $name,
			                'groups' => $neweventarray
			                )
			            ),
			        'phone'=>$phonenumber,
			        'postcode'=>$postcode,
			        'address1'=>$address1,
			        'address2'=>$address2,
			        'city'=>$city,
			        'country'=>$country,
			        'occupation'=>$occupation,
			        'employer'=>$employer,
			        'birth_day'=>$date_of_birth,
			        'conditions'=>$condition,
			        'descripton'=>$i_am_a,
			        'age'=>$age,
			        'volunteer'=>$volunteer,
			        'support_up'=>$support_and_update
			        ),
			    'double_optin'      => true,
			    'update_existing'   => true,
			    'replace_interests' => true,
			    'send_welcome'      => false,
			    )
			);

			//dpm($result);
		}
		//end of the new codes
	}
	else{
		//dpm('disabled');
	}	
}

function print_event_list($result3){
	$total_events = array();
	//gather the subscribed list from the result
	$subscribed_groups_list = $result3['data']['0']['merges']['GROUPINGS'];
	foreach ($subscribed_groups_list as $group) {
		$subscribed_list = $group['groups'];
		//$subscribed_list_name = $group['name'];
		if($group['name'] == 'Events'){
			$subscribed_events = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Courses'){
			$subscribed_courses = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'News Letters'){
			$subscribed_news = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Volunteer'){
			$subscribed_volunteers = get_subscribed_events($subscribed_list);
		}
		elseif($group['name'] == 'Campaign'){
			$subscribed_campaign = get_subscribed_events($subscribed_list);
		}
	}
	$total_events['events']=$subscribed_events;
	$total_events['courses']=$subscribed_courses;
	$total_events['news']=$subscribed_news;
	$total_events['volunteer']=$subscribed_volunteers;
	$total_events['campaigns']=$subscribed_campaign;
	//print_r($total_events);
	return $total_events;
};

//by sending the event type we can get the actual events with that to which user has subscribed.
function get_subscribed_events($array){
	$subscribed_events = array();
	foreach ($array as $event) {
		//if the user has already subscribed to a list the add them to an array
		if($event['interested'] == 1){
			//these are the already subscribed events of the user
			array_push($subscribed_events, $event['name']);
		}
	}
	return $subscribed_events;
};

//get the first name , lastname , phone number , post code , address , city , country
// function print_event_list($result3){
// 	//gather the subscribed list from the result
// 	$subscribed_groups_list = $result3['data']['0']['merges']['GROUPINGS'];
// 	//print_r($total_events);
// 	return $total_events;
// };


?>