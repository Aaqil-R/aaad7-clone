<?php
//Source from:  https://github.com/stripe/stripe-php
require('init.php');

function stripe_custom_init(){
}

function select_trial_period($selected_date){

	$trial_period = 0 ; 

	$currentdate = date('d',time());
	dpm('selected date '.$selected_date);
	dpm('current date '.$currentdate);

	if(intval($currentdate) == intval($selected_date))
	{
		$trial_period = 0;
	}
	elseif(intval($currentdate) < intval($selected_date)){
		$trial_period = $selected_date - $currentdate;
	}
	else{
		$date = date('Y-m-', strtotime('+1 month'));
		$selected_date1 = strval($selected_date);
		$testdate = $date.$selected_date1;
		$now = time();
		$your_date = strtotime($testdate);
    	$datediff = $your_date - $now;
  		$trial_period = floor($datediff/(60*60*24));
	}
	return $trial_period;
}

function stripe_custom_webform_submission_presave($node, $submission){
	$contenttype = $node->type;
	$formid = $node->webform['nid'];
	//Only donations webforms we are considering
	if($contenttype == 'donations'){
		//Gather the submitted form Values
		$trial_period = 0;
		$csv = array();
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//first page details
				case 'select_an_amount':
					$select_an_amount = $submission->data[$key][0];
					$csv['amount']=$select_an_amount;
				break;

				case 'donation_type':
					$donation_type = $submission->data[$key][0];
					$csv['donationtype'] = $donation_type;
				break;

				case 'other_amount':
					$other_amount = $submission->data[$key][0];
				break;

				case 'firstname':
					$firstname = $submission->data[$key][0];
					$csv['firstname'] = $firstname;
				break;

				case 'lastname':
					$lastname = $submission->data[$key][0];
					$csv['lastname'] = $lastname;
				break;

				case 'email':
					$email = $submission->data[$key][0];
					$csv['email'] = $email;
				break;

				//Third page details
				case 'card_number':
					$cardnumber = $submission->data[$key][0];
					//masking the number
					$maskedcardnumber = maskstring($submission->data[$key][0]);
					$submission->data[$key][0] = $maskedcardnumber;
					$csv['creditcard'] = $maskedcardnumber;
				break;

				case 'expiration_date':
					$expiration_date = $submission->data[$key][0];
					$date = date_create($expiration_date);
					$expiration_year = date_format($date,"Y");
					$expiration_month = date_format($date,"m");
				break;
				case 'cv_number':
					$cv_number = $submission->data[$key][0];
				break;

				case 'recurring_date':
					$recurring_date_raw = $submission->data[$key][0];
					$date = date_create($recurring_date_raw);
					$recurring_date = date_format($date,"d");
					$trial_period = select_trial_period($recurring_date);
					$csv['recurringdate'] = $recurring_date;
				break;

				//adding the new field informations
				case 'node_type':
					$csv['phonenumber'] = $submission->data[$key][0];
				break;

				case 'address1':
					$csv['addressline1'] = $submission->data[$key][0];
				break;

				case 'address2':
					$csv['addressline2'] = $submission->data[$key][0];
				break;

				case 'city':
					$csv['city'] = $submission->data[$key][0];
				break;

				case 'post_code':
					$csv['postcode'] = $submission->data[$key][0];
				break;

				case 'country':
					$csv['country'] = $submission->data[$key][0];
				break;

				case 'gift_aid_check_box':
					$csv['giftaid'] = $submission->data[$key][0];
				break;
			}
		}

		//checking whether the other amount is entered

		if($other_amount != '')
		{
			$select_an_amount = $other_amount;
			$csv['amount']=$other_amount;
		}

		//check the Payment type
		if($donation_type == 'Recurring'){
			//create the ID dynamically when creating a subscription plan
			$date1 = date('dmyHis',time());;
			$id = $firstname.$date1;
			$name_of_the_plan = $firstname.'-'.$date1; 

			//TODO: Change the amount and get it from the webform
			$val = create_plan(intval($select_an_amount)*100 , $id , $name_of_the_plan,$formid,$trial_period ,$csv);
			//check whether the Plan was created
			if($val == 0){
				//dpm("Recurring plan created");
				//The plan is created Successfully. Subscribe the user to the plan here.
				//TODO : Create the subscriber here
				$card1 = array();
				$card1['number'] = $cardnumber;
				$card1['exp_month'] = $expiration_month;
				$card1['exp_year'] = $expiration_year;
				$card1['cvc'] = $cv_number;

				$val1 = create_subscriber($id,$email,$card1,$formid,$csv);
				if($val1 == 0){
					//dpm("recurring Subscriber subscribed Sucessfully");
				}
				else{
					//Plan is created successfully But subscriber is not saved to te plan
					//dpm("recurring Subscriber not subscribed");
				}
			}
			else{
				//TODO : must log this data into database
				//dpm("Recurring plan not created");
			}
		}
		//Create a one time payment
		else{
			//creating the card details
			$card1 = array();
			$card1['number'] = $cardnumber;
			$card1['exp_month'] = $expiration_month;
			$card1['exp_year'] = $expiration_year;
			$card1['cvc'] = $cv_number;
			
			$val1 = create_onetime_patment($card1,intval($select_an_amount)*100,$formid,$email,$csv);
			if($val1 == 0){
				//dpm("One time payment added");
			}
			else{
				//dpm("One time payment failed");
			}
		}
	}
}


function create_subscriber($plan , $email , $card,$formid ,$csv){
	try {
		\Stripe\Stripe::setApiKey(get_api());

		//creating the dataset for db logs
		$data = serialize($card);
		$data = addItem($data, $plan , 'plan');
		$data = addItem($data, $email , 'email');

		//connecting to APIS
		$token = \Stripe\Token::create(array(
		  "card" => $card,
		));
		
		$customer = \Stripe\Customer::create(array(
		  "source" => $token,
		  "plan" => $plan,
		  "email" => $email)
		);

		$result = serialize($customer);
		stripe_data_log($result,$data,$formid);
		$status = "success";
		$reference = $customer->id;
		stripe_csv_data_log($csv , $status , "" , $reference);
		//$test = $charge->__toJSON();
		return 0;

	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	}
}

function create_plan($amount , $id , $name , $formid , $trial_period , $csv){
	try {

		$dataset = array(
				'amount'=>$amount,
				'name'=>$name,
				'id'=>$id,
			);
		$data = serialize($dataset);

		//creating a new plan
		\Stripe\Stripe::setApiKey(get_api());

		$plan = \Stripe\Plan::create(array(
		  "amount" => $amount,
		  "interval" => "month",
		  "name" => $name,
		  "currency" => "gbp",
		  "id" => $id,
		  "trial_period_days" => intval($trial_period))
		);
		
		$result = serialize($plan);
		stripe_data_log($result,$data,$formid);
		// $status = "success";
		// $reference = $plan->id;
		// stripe_csv_data_log($csv , $status , "" , $reference);
		//$test = $charge->__toJSON();
		return 0;
	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	}
}

function create_onetime_patment($card,$amount,$formid ,$email ,$csv){
	try {
		$data = serialize($card);
		$data = addItem($data, $amount , 'amount');

		//defining the api key 
		\Stripe\Stripe::setApiKey(get_api());

		//defining the charge details for one time payments
		$charge = \Stripe\Charge::create(array('card' => $card, 
												'amount' => $amount, 
												'currency' => 'gbp',
												'receipt_email' => $email));
		$result = serialize($charge);
		stripe_data_log($result,$data,$formid);

		$status = "success";
		$reference = $charge->id;
		stripe_csv_data_log($csv , $status , "" , $reference);
		//$test = $charge->__toJSON();
		return 0;

	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	}
}

function maskstring($number){
	$count = strlen($number);
	for( $i=0; $i<$count-4 ; $i++){
		$number[$i] = 'X';
	}
	return $number;
}


//Setting the Api key of Stripe.
//TODO : Change it when setup to the live environment.
function get_api(){
	return "sk_test_cmi32OHLo1FuZ8RBKzBTvfPt";
}

//Logging the transactions and the results in a Database
function stripe_data_log($result , $data , $formid){
	$record = array(
    	"result" => $result,
    	"data" => $data,
    	"formid" => $formid,
    	"datatime" => time(),
    );
  	drupal_write_record('stripe_error_log', $record);
}

//serializing data before adding to the database
function addItem($serializedArray, $item , $key)
{
   $a = unserialize($serializedArray);
   $a[$key] = $item;
   return serialize($a);
}


function stripe_csv_data_log($csv , $status , $message , $reference){
	$record123 = array(
		"firstname" => $csv['firstname'],
    	"lastname" => $csv['lastname'],
    	"email" => $csv['email'],
    	"phonenumber" => $csv['phonenumber'],
		"addressline1" => $csv['addressline1'],
		"addressline2" => $csv['addressline2'],
		"city" => $csv['city'],
		"postcode" => $csv['postcode'],
		"country" => $csv['country'],
		"giftaid" => $csv['giftaid'],
		"amount" => $csv['amount'],
		"donationtype" => $csv['donationtype'],
		"recurringdate" => $csv['recurringdate'],
		"submissiondatetime" => time(),
		"creditcard" => $csv['creditcard'],
		"status" => $status,
		"errormessage" => $message,
		"reference" => $reference,
    );
   	drupal_write_record('donation_csv_log', $record123);
}

	//csv details
	function stripe_custom_permission() {
	  return array(
    	'access stripe_custom content' => array(
    		'title' => t('Access permision to view the webform submissions'),
    		)
  		);
	}

	//new codes that are added
	function stripe_custom_menu() {		
		
		$items['download/donations'] = array(
			'title' => t('Download petitions'),
			'page callback' => 'stripe_custom_download_form', 
			'access arguments' => array('access stripe_custom content'),
			//'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		
		return $items;
	}
	
	/**
	*	Return the form.
	*/
	function stripe_custom_download_form() {		
		
		return drupal_get_form('stripe_custom_download_page');
		
	}
	
	/**
	*	Build the form.
	*/
	function stripe_custom_download_page($form_state){

		$form['description_text'] = array(
  			'#markup' => '<p>Click the generate button to download the submissons.</p>'
		);


		$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Generate'),
			'#submit' => array('stripe_custom_download_submit')
		);
		
		$form['buttons']['add'] = array(
      		'#type' => 'submit',
      		'#value' => t('Home'),
      		'#submit' => array('go_to'),
      	);

		return $form;	
	}

	function go_to(){
		//drupal_goto('http://www.mind.org.uk/');
		drupal_goto('<front>');
	}
	
	/**
	*	Handle the form submission.
	*/
	function stripe_custom_download_submit($form, &$form_state) {	
			
		$filename = 'donations_submissions';
		
		drupal_add_http_header('Content-Type', 'text/csv; utf-8');
		drupal_add_http_header('Content-Disposition', 'attachment; filename='.$filename.'.csv');
 
		// Instead of writing to a file, we write to the output stream.
		$fh = fopen('php://output', 'w');
 
		// Add a header row
		fputcsv($fh, array(t('Id number'), 
			t('firstname'), 
			t('lastname'), 
			t('email'),
			t('phonenumber'), 
			t('addressline1'), 
			t('addressline2'),
			t('city'), 
			t('postcode'),
			t('country'),
			t('giftaid'), 
			t('amount'), 
			t('donationtype'),
			t('recurringdate'), 
			t('submissiondatetime'), 
			t('creditcard'),
			t('status'), 
			t('errormessage'), 
			t('reference')));

		$results = db_select('donation_csv_log', 'd')
		->fields('d')
		->execute()
		->fetchAll();

		foreach($results as $result) {
			//getting the date formatted
			$date = new DateTime("@$result->submissiondatetime");
			$formatteddate = $date->format('Y-m-d H:i:s');

			fputcsv($fh, array($result->ID, 
				$result->firstname, 
				$result->lastname, 
				$result->email, 
				$result->phonenumber, 
				$result->addressline1, 
				$result->addressline2, 
				$result->city,
				$result->postcode, 
				$result->country, 
				$result->giftaid, 
				$result->amount, 
				$result->donationtype, 
				$result->recurringdate, 
				$formatteddate, 
				$result->creditcard,
				$result->status,
				$result->errormessage,
				$result->reference));
		}

		fclose($fh);
		
		drupal_exit();

		$form['results']['#value'] = "Test";

		return $form['results'];
	}


?>