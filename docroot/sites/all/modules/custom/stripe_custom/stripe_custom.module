<?php
//Source from:  https://github.com/stripe/stripe-php
require('init.php');

function stripe_custom_init(){

}

function stripe_custom_webform_submission_insert($node, $submission){
	//TODO : Find a way to create the ID dynamically when creating a subscription plan
	$val = create_plan(120 , "id6");
	//dpm("value is : ".$val);
	if($val == 0){
		//The plan is created Successfully. Subscribe the user to the plan here.
		//TODO : Create the subscriber here
	}
	else{
		//TODO : Update the DB with the error log.
	}
}


function create_subscriber($plan){
	//TODO : the plan should be dynamically created
	//TODO : Get the card details , email from the function.
	\Stripe\Stripe::setApiKey(get_api());

	$token = \Stripe\Token::create(array(
	  "card" => array(
	    "number" => "4242424242424242",
	    "exp_month" => 11,
	    "exp_year" => 2016,
	    "cvc" => "314"
	  )
	));

	$customer = \Stripe\Customer::create(array(
	  "source" => $token,
	  "plan" => $plan,
	  "email" => "payinguser@example.com")
	);

	dpm($customer);
}

function create_plan($amount , $id){
	//TODO : When creating a new plan the amount must come from the webform submission
	try {
		//creating a new plan
		\Stripe\Stripe::setApiKey(get_api());

		$test = \Stripe\Plan::create(array(
		  "amount" => $amount,
		  "interval" => "month",
		  "name" => "new Plan",
		  "currency" => "usd",
		  "id" => $id)
		);
		return 0;
	} catch(\Stripe\Error\Card $e) {
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		return -1;
	} catch (\Stripe\Error\Base $e) {
		return -1;
	} catch (Exception $e) {
		return -1;
	}
}

function create_ontime_patment(){
	//defining the api key 
	\Stripe\Stripe::setApiKey(get_api());

	//defining the card details
	//TODO : Create the details from the function do not call the details directly 
	//in the payment method.
	$myCard = array('number' => '4242424242424242', 'exp_month' => 8, 'exp_year' => 2018);

	//defining the charge details for one time payments
	$charge = \Stripe\Charge::create(array('card' => $myCard, 
											'amount' => 2000, 
											'currency' => 'usd'));
	echo $charge;
	//dpm($charge);
}

function stripe_custom_webform_submission_presave($node, $submission){
	// dpm($node);
	//dpm($submission);
	//$contenttype = $node->type;
	if($contenttype == 'donations'){
		//TODO:add the codes inside this to only be applicable to the donations.
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				case 'firstname':
					$firstname = $submission->data[$key][0];
				break;
				case 'amount':
					$amount = $submission->data[$key][0];
				break;
			}
		}

		dpm($firstname);
		$newname = maskstring($firstname);
		dpm($newname);

		//updating it with new values
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				case 'firstname':
					$submission->data[$key][0] = 'Testing name';
				break;
				case 'amount':
					$submission->data[$key][0] = 123456;
				break;
			}
		}
	}
}

function maskstring($number){
	$count = strlen($number);
	for( $i=0; $i<$count-4 ; $i++){
		$number[$i] = 'X';
	}
	return $number;
}

//not calling this at the moment.
function FormatCreditCard($cc)
{    // Clean out extra data that might be in the cc
    $cc = str_replace(array('-',' '),'',$cc);
    // Get the CC Length
    $cc_length = strlen($cc);
    // Initialize the new credit card to contian the last four digits
    $newCreditCard = substr($cc,-4);
    // Walk backwards through the credit card number and add a dash after every fourth digit
    for($i=$cc_length-5;$i>=0;$i--){
        // If on the fourth character add a dash
        if((($i+1)-$cc_length)%4 == 0){
            $newCreditCard = '-'.$newCreditCard;
        }
        // Add the current character to the new credit card
        $newCreditCard = $cc[$i].$newCreditCard;
    }
    // Return the formatted credit card number
    return $newCreditCard;
}

//Setting the Api key of Stripe.
//Change it when setup to the live environment.
function get_api(){
	return "sk_test_cmi32OHLo1FuZ8RBKzBTvfPt";
}
?>