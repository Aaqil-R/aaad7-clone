<?php
//Source from:  https://github.com/stripe/stripe-php
require('init.php');

function stripe_custom_init(){
	//dpm("loaded");
}

//function stripe_custom_webform_submission_insert($node, $submission){
//}

function stripe_custom_webform_submission_presave($node, $submission){
//function test($node, $submission){
	$contenttype = $node->type;
	$formid = $node->webform['nid'];
	//Only donations webforms we are considering
	if($contenttype == 'donations'){
		//Gather the submitted form Values
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//first page details
				case 'select_an_amount':
					$select_an_amount = $submission->data[$key][0];
					
				break;
				case 'donation_type':
					$donation_type = $submission->data[$key][0];

				break;
				case 'other_amount':
					$other_amount = $submission->data[$key][0];

				break;
				//second page details
				case 'firstname':
					$firstname = $submission->data[$key][0];

				break;
				case 'lastname':
					$lastname = $submission->data[$key][0];

				break;
				case 'email':
					$email = $submission->data[$key][0];

				break;
				//Third page details
				case 'card_number':
					$cardnumber = $submission->data[$key][0];

				break;
				case 'expiration_date':
					$expiration_date = $submission->data[$key][0];
					$date = date_create($expiration_date);
					$expiration_year = date_format($date,"Y");
					$expiration_month = date_format($date,"m");

				break;
				case 'cv_number':
					$cv_number = $submission->data[$key][0];

				break;
			}
		}

		//checking whether the other amount is entered

		if($other_amount != '')
		{
			$select_an_amount = $other_amount;
		}
		//$select_an_amount
		//$other_amount

		//updating only the card value with the new value before saving to Database
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//chaing the card number
				case 'card_number':
					//masking the number
					$maskedcardnumber = maskstring($submission->data[$key][0]);
					$submission->data[$key][0] = $maskedcardnumber;
				break;
			}
		}
		//check the Payment type
		if($donation_type == 'Recurring'){
			//create the ID dynamically when creating a subscription plan
			$date1 = date('dmyHis',time());;
			$id = $firstname.$date1;
			$name_of_the_plan = $firstname.'-'.$date1; 

			//TODO: Change the amount and get it from the webform
			$val = create_plan(intval($select_an_amount)*100 , $id , $name_of_the_plan,$formid);
			//check whether the Plan was created
			if($val == 0){
				//dpm("Recurring plan created");
				//The plan is created Successfully. Subscribe the user to the plan here.
				//TODO : Create the subscriber here
				$card1 = array();
				$card1['number'] = $cardnumber;
				$card1['exp_month'] = $expiration_month;
				$card1['exp_year'] = $expiration_year;
				$card1['cvc'] = $cv_number;

				$val1 = create_subscriber($id,$email,$card1,$formid);
				if($val1 == 0){
					//dpm("recurring Subscriber subscribed Sucessfully");
				}
				else{
					//Plan is created successfully But subscriber is not saved to te plan
					//dpm("recurring Subscriber not subscribed");
				}
			}
			else{
				//TODO : must log this data into database
				//dpm("Recurring plan not created");
			}
		}
		//Create a one time payment
		else{
			//creating the card details
			$card1 = array();
			$card1['number'] = $cardnumber;
			$card1['exp_month'] = $expiration_month;
			$card1['exp_year'] = $expiration_year;
			$card1['cvc'] = $cv_number;
			
			$val1 = create_onetime_patment($card1,intval($select_an_amount)*100,$formid,$email);
			if($val1 == 0){
				//dpm("One time payment added");
			}
			else{
				//dpm("One time payment failed");
			}
		}
	}
}


function create_subscriber($plan , $email , $card,$formid){
	try {
		\Stripe\Stripe::setApiKey(get_api());

		//creating the dataset for db logs
		$data = serialize($card);
		$data = addItem($data, $plan , 'plan');
		$data = addItem($data, $email , 'email');

		//connecting to APIS
		$token = \Stripe\Token::create(array(
		  "card" => $card,
		));
		
		$customer = \Stripe\Customer::create(array(
		  "source" => $token,
		  "plan" => $plan,
		  "email" => $email)
		);

		$result = serialize($customer);
		stripe_data_log($result,$data,$formid);
		return 0;

	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	}
}

function create_plan($amount , $id , $name ,$formid){
	try {

		$dataset = array(
				'amount'=>$amount,
				'name'=>$name,
				'id'=>$id,
			);
		$data = serialize($dataset);

		//creating a new plan
		\Stripe\Stripe::setApiKey(get_api());

		$plan = \Stripe\Plan::create(array(
		  "amount" => $amount,
		  "interval" => "month",
		  "name" => $name,
		  "currency" => "gbp",
		  "id" => $id)
		);
		
		$result = serialize($plan);
		stripe_data_log($result,$data,$formid);
		return 0;
	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	}
}

function create_onetime_patment($card,$amount,$formid ,$email){
	try {
		$data = serialize($card);
		$data = addItem($data, $amount , 'amount');

		//defining the api key 
		\Stripe\Stripe::setApiKey(get_api());

		//defining the charge details for one time payments
		$charge = \Stripe\Charge::create(array('card' => $card, 
												'amount' => $amount, 
												'currency' => 'gbp',
												'receipt_email' => $email));
		$result = serialize($charge);
		stripe_data_log($result,$data,$formid);
		return 0;

	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		return -1;
	}
}

function maskstring($number){
	$count = strlen($number);
	for( $i=0; $i<$count-4 ; $i++){
		$number[$i] = 'X';
	}
	return $number;
}


//Setting the Api key of Stripe.
//TODO : Change it when setup to the live environment.
function get_api(){
	return "sk_test_cmi32OHLo1FuZ8RBKzBTvfPt";
}

//Logging the transactions and the results in a Database
function stripe_data_log($result , $data , $formid){
	$record = array(
    	"result" => $result,
    	"data" => $data,
    	"formid" => $formid,
    	"datatime" => time(),
    );
  	drupal_write_record('stripe_error_log', $record);
}

//serializing data before adding to the database
function addItem($serializedArray, $item , $key)
{
   $a = unserialize($serializedArray);
   $a[$key] = $item;
   return serialize($a);
}

//getting the values from the webfrom submission
function getwebformvalues(){

}

//updating the webform submission values
function setwebformvalues(){

}



//new codes that need 
// private function prepareFields($components, $submission){

// 			$component_array = array();

// 			foreach ($components as $key => $field) {
// 				$component_array[$field['form_key']] = $submission->data[$key][0];
// 			}

// 			return $component_array;
// 		}

// 		function getFields(){
// 			return $this->fields;
// 		}

// 		function getField($field_key){
// 			return $this->fields[$field_key];
// 		}
?>