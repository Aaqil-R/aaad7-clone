<?php
//Source from:  https://github.com/stripe/stripe-php
require('init.php');

function stripe_custom_init(){

	// $results = db_select('donation_csv_log', 'd')
	// 	->fields('d',array('ID'))
	// 	->execute()
	// 	->fetchAll();

	// dpm($results);


	// dpm("testing mail");
	// $messagebody = '<a href="google.com">Google testing update</a>';
	// stripe_custom_create_mails('amalantest@gmail.com',$messagebody);

	// $role = 'Donation Admins';
	// $emailaddresses = array();

	// //selecting the users for a given role and getting their emails
	// $sql = "SELECT users.name as name , users.mail as emails
	// 		FROM role , users_roles , users 
	// 		WHERE role.rid = users_roles.rid and users_roles.uid = users.uid and users.status = 1 and role.name = '".$role."'";
	// $result = db_query($sql);
	// foreach ($result as $record) {
	// 	$name = $record->name;
 //    	$email = $record->emails;
 // 		$emailaddresses[$name] = $email ;
	// }

	// dpm($emailaddresses);
	//return $emailaddresses;

	//stripe_custom_create_mails('amalantest@gmail.com','test message to see the output');
	// $nodeid = arg(1);
	// dpm($nodeid);

	// $nid = arg(1);
	// $node = node_load($nid);
	// dpm($node);
	// $my_field_items = field_get_items('node', $node, 'field_thankyou_message');
	// //$output = field_view_value('node', $node, 'field_thankyou_message', $my_field_items[0]);
	// $output = $my_field_items[0]['value'];
	// dpm($output);
	// dpm($my_field_items);
	//dpm(render($output));

	//sendmail(677071 , 'amalantest@gmail.com');


}

function select_trial_period($selected_date){

	$trial_period = 0 ; 

	$currentdate = date('d',time());
	// dpm('selected date '.$selected_date);
	// dpm('current date '.$currentdate);

	if(intval($currentdate) == intval($selected_date))
	{
		$trial_period = 0;
	}
	elseif(intval($currentdate) < intval($selected_date)){
		$trial_period = $selected_date - $currentdate;
	}
	else{
		$date = date('Y-m-', strtotime('+1 month'));
		$selected_date1 = strval($selected_date);
		$testdate = $date.$selected_date1;
		$now = time();
		$your_date = strtotime($testdate);
    	$datediff = $your_date - $now;
  		$trial_period = floor($datediff/(60*60*24));
	}
	return $trial_period;
}

function stripe_custom_webform_submission_presave($node, $submission){
	$nid = $node->nid;
	$contenttype = $node->type;
	$formid = $node->webform['nid'];
	//Only donations webforms we are considering
	if($contenttype == 'donations'){
		//Gather the submitted form Values
		$trial_period = 0;
		$csv = array();
		$csv['formid'] = $formid;
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//first page details
				case 'select_an_amount':
					$select_an_amount = $submission->data[$key][0];
					$csv['amount']=$select_an_amount;
				break;

				case 'donation_type':
					$donation_type = $submission->data[$key][0];
					$csv['donationtype'] = $donation_type;
				break;

				case 'other_amount':
					$other_amount = $submission->data[$key][0];
				break;

				case 'firstname':
					$firstname = $submission->data[$key][0];
					$csv['firstname'] = $firstname;
				break;

				case 'lastname':
					$lastname = $submission->data[$key][0];
					$csv['lastname'] = $lastname;
				break;

				case 'email':
					$email = $submission->data[$key][0];
					$csv['email'] = $email;
				break;

				//Third page details
				case 'card_number':
					$cardnumber = $submission->data[$key][0];
					//masking the number
					$maskedcardnumber = maskstring($submission->data[$key][0]);
					$submission->data[$key][0] = $maskedcardnumber;
					$csv['creditcard'] = $maskedcardnumber;
				break;

				case 'expiration_date':
					$expiration_date = $submission->data[$key][0];
					$date = date_create($expiration_date);
					$expiration_year = date_format($date,"Y");
					$expiration_month = date_format($date,"m");
					$csv['expirydate'] = $expiration_date;
				break;
				case 'cv_number':
					$cv_number = $submission->data[$key][0];
					$maskedcv = stripe_custom_maskstring($submission->data[$key][0]);
					$submission->data[$key][0] = $maskedcv;
				break;

				case 'recurring_date':
					$recurring_date_raw = $submission->data[$key][0];
					$date = date_create($recurring_date_raw);
					$recurring_date = date_format($date,"d");
					$trial_period = select_trial_period($recurring_date);
					$csv['recurringdate'] = $recurring_date;
				break;

				case 'donation_period':
					$donationperiod = $submission->data[$key][0];
					$csv['donationperiod'] = $donationperiod;
					$csv['donationinterval'] = 1;
					if($donationperiod == 'quarter'){
						//overiding the quarter year process
						$csv['donationperiod'] = "month";
						$csv['donationinterval'] = 3;
					}
				break;

				//adding the new field informations
				case 'node_type':
					$csv['phonenumber'] = $submission->data[$key][0];
				break;

				case 'address1':
					$csv['addressline1'] = $submission->data[$key][0];
				break;

				case 'address2':
					$csv['addressline2'] = $submission->data[$key][0];
				break;

				case 'city':
					$csv['city'] = $submission->data[$key][0];
				break;

				case 'post_code':
					$csv['postcode'] = $submission->data[$key][0];
				break;

				case 'country':
					$csv['country'] = $submission->data[$key][0];
				break;

				case 'gift_aid_check_box':
					$csv['giftaid'] = $submission->data[$key][0];
				break;
			}
		}

		//checking whether the other amount is entered

		if($other_amount != '')
		{
			$select_an_amount = $other_amount;
			$csv['amount'] = $other_amount;
		}

		//check the Payment type
		if($donation_type == 'Recurring'){
			//create the ID dynamically when creating a subscription plan
			$date1 = date('dmyHis',time());;
			$id = $firstname.$date1;
			$name_of_the_plan = $firstname.'-'.$date1; 

			//TODO: Change the amount and get it from the webform
			$val = create_plan(intval($select_an_amount)*100 , $id , $name_of_the_plan,$formid,$trial_period ,$csv);
			//check whether the Plan was created
			if($val == 0){
				//dpm("Recurring plan created");
				//The plan is created Successfully. Subscribe the user to the plan here.
				//TODO : Create the subscriber here
				$card1 = array();
				$card1['number'] = $cardnumber;
				$card1['exp_month'] = $expiration_month;
				$card1['exp_year'] = $expiration_year;
				$card1['cvc'] = $cv_number;
				$card1['name'] = $firstname.' '.$lastname;
				$emailname = $card1['name'];
				$val1 = create_subscriber($id,$email,$card1,$formid,$csv);
				if($val1 === 0){
					//dpm("recurring Subscriber subscribed Sucessfully");
					sendmail($nid , $email ,$emailname);
					//stripe_custom_create_session('name' , $card1['name']);
					//lists_session("s_key", $card1['name']);

					lists_session("total", $csv['amount']);
					lists_session("sku", 'GeneralDonation');
					lists_session("name", 'Recurring');
					lists_session("price", $csv['amount']);
					lists_session("quantity", 1);

				}
				else{
					//Plan is created successfully But subscriber is not saved to te plan
					//dpm("recurring Subscriber not subscribed");
					$message = "error";
					if($val1 == 'Your card was declined.'){
						$message = "card-declined";
					}
					foreach ($node->webform['components'] as $key => $field) 
					{
						switch ($field['form_key']) 
						{
							//first page details			
							case 'stripe_status':
								$submission->data[$key][0] = $message;
							break;
						}
					}
				}
			}
			else{
				//TODO : must log this data into database
				//dpm("Recurring plan not created");
			}
		}
		//Create a one time payment
		else{
			//creating the card details
			$card1 = array();
			$card1['number'] = $cardnumber;
			$card1['exp_month'] = $expiration_month;
			$card1['exp_year'] = $expiration_year;
			$card1['cvc'] = $cv_number;
			$card1['name'] = $firstname.' '.$lastname;
			$emailname = $card1['name'];
			$val1 = create_onetime_patment($card1,intval($select_an_amount)*100,$formid,$email,$csv);
			if($val1 === 0){
				//dpm("One time payment added");
				sendmail($nid , $email ,$emailname);

				//lists_session("s_key", $card1['name']);
				lists_session("total", $csv['amount']);
				lists_session("sku", 'GeneralDonation');
				lists_session("name", 'OneTime');
				lists_session("price", $csv['amount']);
				lists_session("quantity", 1);
			}
			else{
				$message = "error";
				if($val1 == 'Your card was declined.'){
					$message = "card-declined";
				}
				foreach ($node->webform['components'] as $key => $field) 
				{
					switch ($field['form_key']) 
					{
						//first page details			
						case 'stripe_status':
							$submission->data[$key][0] = $message;
						break;
					}
				}
			}
		}
	}
}


function create_subscriber($plan , $email , $card,$formid ,$csv){
	try {
		\Stripe\Stripe::setApiKey(get_api());

		//creating the dataset for db logs
		$data = serialize($card);
		$data = addItem($data, $plan , 'plan');
		$data = addItem($data, $email , 'email');

		//connecting to APIS
		$token = \Stripe\Token::create(array(
		  "card" => $card,
		));
		
		$customer = \Stripe\Customer::create(array(
		  "source" => $token,
		  "plan" => $plan,
		  "email" => $email)
		);

		$result = serialize($customer);
		stripe_data_log($result,$data,$formid);
		$status = "success";
		$reference = $customer->id;
		stripe_csv_data_log($csv , $status , "" , $reference);
		//$test = $charge->__toJSON();

		//including the email here so that we can send the mail with reference number
		sendmailsadmin($reference , $csv);
		return 0;

	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	}
}

function create_plan($amount , $id , $name , $formid , $trial_period , $csv){
	try {

		$dataset = array(
				'amount'=>$amount,
				'name'=>$name,
				'id'=>$id,
			);
		$data = serialize($dataset);

		//creating a new plan
		\Stripe\Stripe::setApiKey(get_api());

		$plan = \Stripe\Plan::create(array(
		  "amount" => $amount,
		  "interval" => $csv['donationperiod'],
		  "interval_count" => $csv['donationinterval'],
		  "name" => $name,
		  "currency" => "gbp",
		  "id" => $id,
		  'receipt_email' => $email,
		  "trial_period_days" => intval($trial_period))
		);
		
		$result = serialize($plan);
		stripe_data_log($result,$data,$formid);
		// $status = "success";
		// $reference = $plan->id;
		// stripe_csv_data_log($csv , $status , "" , $reference);
		//$test = $charge->__toJSON();
		return 0;
	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		// $status = "failed";
		// $message = $e->jsonBody['error']['message'];
		// $reference = $e->requestId;
  //   	stripe_csv_data_log($csv , $status , $message , $reference);
		return -1;
	}
}

function create_onetime_patment($card,$amount,$formid ,$email ,$csv){
	try {
		$data = serialize($card);
		$data = addItem($data, $amount , 'amount');

		//defining the api key 
		\Stripe\Stripe::setApiKey(get_api());

		//defining the charge details for one time payments
		$charge = \Stripe\Charge::create(array('card' => $card, 
												'amount' => $amount, 
												'currency' => 'gbp',
												'receipt_email' => $email));
		$result = serialize($charge);
		stripe_data_log($result,$data,$formid);

		$status = "success";
		$reference = $charge->id;
		stripe_csv_data_log($csv , $status , "" , $reference);
		//$test = $charge->__toJSON();

		sendmailsadmin($reference ,  $csv);
		return 0;

	} catch(\Stripe\Error\Card $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\RateLimit $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\InvalidRequest $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\Authentication $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\ApiConnection $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (\Stripe\Error\Base $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	} catch (Exception $e) {
		$result = serialize($e->jsonBody['error']);
		stripe_data_log($result,$data,$formid);
		$status = "failed";
		$message = $e->jsonBody['error']['message'];
		$reference = $e->requestId;
    	stripe_csv_data_log($csv , $status , $message , $reference);
		return $message;
	}
}

function maskstring($number){
	$count = strlen($number);
	for( $i=0; $i<$count-4 ; $i++){
		$number[$i] = 'X';
	}
	return $number;
}

function stripe_custom_maskstring($number){
	$count = strlen($number);
	for( $i=0; $i<$count; $i++){
		$number[$i] = 'X';
	}
	return $number;
}

//Setting the Api key of Stripe.
//TODO : Change it when setup to the live environment.
function get_api(){
	// return "sk_test_cmi32OHLo1FuZ8RBKzBTvfPt";
	return "sk_live_bosZHuNWOrBdX01FgIw72Y2O";
}

//Logging the transactions and the results in a Database
function stripe_data_log($result , $data , $formid){
	$record = array(
    	"result" => $result,
    	"data" => $data,
    	"formid" => $formid,
    	"datatime" => time(),
    );
  	drupal_write_record('stripe_error_log', $record);
}

//serializing data before adding to the database
function addItem($serializedArray, $item , $key)
{
   $a = unserialize($serializedArray);
   $a[$key] = $item;
   return serialize($a);
}


function stripe_csv_data_log($csv , $status , $message , $reference){
	$record123 = array(
		"firstname" => $csv['firstname'],
    	"lastname" => $csv['lastname'],
    	"email" => $csv['email'],
    	"phonenumber" => $csv['phonenumber'],
		"addressline1" => $csv['addressline1'],
		"addressline2" => $csv['addressline2'],
		"city" => $csv['city'],
		"postcode" => $csv['postcode'],
		"country" => $csv['country'],
		"giftaid" => $csv['giftaid'],
		"amount" => $csv['amount'],
		"donationtype" => $csv['donationtype'],
		"recurringdate" => $csv['recurringdate'],
		"donationperiod" => $csv['donationperiod'],
		"donationinterval" => $csv['donationinterval'],
		"submissiondatetime" => time(),
		"creditcard" => $csv['creditcard'],
		"status" => $status,
		"errormessage" => $message,
		"reference" => $reference,
		"formid" => $csv['formid'],
		"expirydate"=> $csv['expirydate']
    );
   	drupal_write_record('donation_csv_log', $record123);
}

	//csv details
	function stripe_custom_permission() {
	  return array(
    	'access stripe_custom content' => array(
    		'title' => t('Access permision to view the webform submissions'),
    		)
  		);
	}

	//new codes that are added
	function stripe_custom_menu() {		
		
		$items['download/donations'] = array(
			'title' => t('Download Donations Data'),
			'page callback' => 'stripe_custom_download_form', 
			'access arguments' => array('access stripe_custom content'),
			//'access callback' => TRUE,
			'type' => MENU_CALLBACK,
		);
		
		return $items;
	}
	
	/**
	*	Return the form.
	*/
	function stripe_custom_download_form() {		
		
		return drupal_get_form('stripe_custom_download_page');
		
	}
	
	/**
	*	Build the form.
	*/
	function stripe_custom_download_page($form_state){

		$form['description_text'] = array(
  			'#markup' => '<p>Click the generate button to download the submissons.</p>'
		);


		$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Generate'),
			'#submit' => array('stripe_custom_download_submit')
		);
		
		$form['buttons']['add'] = array(
      		'#type' => 'submit',
      		'#value' => t('Home'),
      		'#submit' => array('go_to'),
      	);

		return $form;	
	}

	function go_to(){
		//drupal_goto('http://www.mind.org.uk/');
		drupal_goto('<front>');
	}
	
	/**
	*	Handle the form submission.
	*/
	function stripe_custom_download_submit($form, &$form_state) {	
			
		$filename = 'donations_submissions';
		
		drupal_add_http_header('Content-Type', 'text/csv; utf-8');
		drupal_add_http_header('Content-Disposition', 'attachment; filename='.$filename.'.csv');
 
		// Instead of writing to a file, we write to the output stream.
		$fh = fopen('php://output', 'w');
 
		// Add a header row
		fputcsv($fh, array(t('Id number'), 
			t('firstname'), 
			t('lastname'), 
			t('email'),
			t('phonenumber'), 
			t('addressline1'), 
			t('addressline2'),
			t('city'), 
			t('postcode'),
			t('country'),
			t('giftaid'), 
			t('amount'), 
			t('donationtype'),
			t('recurringdate'),
			t('donationperiod'), 
			t('donationinterval'),  
			t('submissiondatetime'), 
			t('creditcard'),
			t('status'), 
			t('errormessage'), 
			t('reference'), 
			t('formid')));

		$results = db_select('donation_csv_log', 'd')
		->fields('d',array('ID',
						'firstname',
						'lastname',
						'email',
						'phonenumber',
						'addressline1',
						'addressline2',
						'city',
						'postcode',
						'country',
						'giftaid',
						'amount',
						'donationtype',
						'recurringdate',
						'donationperiod',
						'donationinterval',
						'submissiondatetime',
						'creditcard',
						'status',
						'errormessage',
						'reference',
						'formid',))
		->execute()
		->fetchAll();

		foreach($results as $result) {
			//getting the date formatted
			$date = new DateTime("@$result->submissiondatetime");
			$formatteddate = $date->format('Y-m-d H:i:s');

			fputcsv($fh, array($result->ID, 
				$result->firstname, 
				$result->lastname, 
				$result->email, 
				$result->phonenumber, 
				$result->addressline1, 
				$result->addressline2, 
				$result->city,
				$result->postcode, 
				$result->country, 
				$result->giftaid, 
				$result->amount, 
				$result->donationtype, 
				$result->recurringdate,
				$result->donationperiod,
				$result->donationinterval, 
				$formatteddate, 
				$result->creditcard,
				$result->status,
				$result->errormessage,
				$result->reference,
				$result->formid));
		}

		fclose($fh);
		
		drupal_exit();

		$form['results']['#value'] = "Test";

		return $form['results'];
	}

	function get_thankyou_message($nid){
		//$nid = arg(1);
		$node = node_load($nid);
		$my_field_items = field_get_items('node', $node, 'field_thankyou_message');
		//$message = field_view_value('node', $node, 'field_thankyou_message', $my_field_items[0]);
		//$output = render($message);
		$output = $my_field_items[0]['value'];
		return $output;
	}

	function stripe_custom_create_mails($email,$messagebody,$emailname){

	$var = 'http://'.$_SERVER['HTTP_HOST'];
	$mailbody = 'Dear '.$emailname.'<br>'.$messagebody;
	
	$my_module = 'stripe_custom';
	$my_mail_token = 'bar';
	$from = variable_get('system_mail', 'ambitiousaboutautism.org.uk');	
	$message = array(
	  'id' => $my_module . '_' . $my_mail_token,
	  'to' => $email,
	  'subject' => 'Thank you for your Donation',
	  'body' => $mailbody,
	  'headers' => array(
	    'From' => $from,
	    'Sender' => $from,
	    'Return-Path' => $from,
	    'Content-Type' => 'text/html;charset=utf-8',
	  ),
	);
	$system = drupal_mail_system($my_module, $my_mail_token);

	// The format function must be called before calling the mail function. 
	//$message = $system->format($message);
	//dpm($message);
	if ($system->mail($message)) {
		// Success.
		//dpm('Success');
	}
	else {
	  	// Failure.
		//dpm('Fail');
	}
}

function sendmail($nid , $email ,$emailname){
	$message = get_thankyou_message($nid);
	stripe_custom_create_mails($email,$message,$emailname);
}


function stripe_custom_get_email_address($role){
	//creating an array which will store the email addresses of the user
	$emailaddresses = array();

	//selecting the users for a given role and getting their emails
	$sql = "SELECT users.name as name , users.mail as emails
			FROM role , users_roles , users 
			WHERE role.rid = users_roles.rid and users_roles.uid = users.uid and users.status = 1 and role.name = '".$role."'";
	$result = db_query($sql);
	foreach ($result as $record) {
		$name = $record->name;
    	$email = $record->emails;
 		$emailaddresses[$name] = $email ;
	}
	return $emailaddresses;
}


function sendmailsadmin($referencenumber ,  $csv){
	$emails = stripe_custom_get_email_address('Donation Admins');
	$amount = $csv['amount'];
	$name = $csv['firstname'].' '.$csv['lastname'];
	$emailaddress = $csv['email']; 
	foreach ($emails as $email) {
		//call the function to create mail here
		create_admin_mails($email,$referencenumber,$amount,$name,$emailaddress);
	}
}

function create_admin_mails($email,$referencenumber,$amount,$name,$emailaddress){

	$var = 'http://'.$_SERVER['HTTP_HOST'];
	$mailbody = 'A new donation has been added. <br> 
		Reference number : '.$referencenumber.'<br>
		Name of the Donor : '.$name.'<br>
		Amount Donated : '.$amount.'£<br>
		Contact Email Address : '.$emailaddress;
	
	$my_module = 'stripe_custom';
	$my_mail_token = 'bar';
	$from = variable_get('system_mail', 'ambitiousaboutautism.org.uk');	
	$message = array(
	  'id' => $my_module . '_' . $my_mail_token,
	  'to' => $email,
	  'subject' => 'New Donation Added',
	  'body' => $mailbody,
	  'headers' => array(
	    'From' => $from,
	    'Sender' => $from,
	    'Return-Path' => $from,
	    'Content-Type' => 'text/html;charset=utf-8',
	  ),
	);
	$system = drupal_mail_system($my_module, $my_mail_token);

	// The format function must be called before calling the mail function. 
	//$message = $system->format($message);
	//dpm($message);
	if ($system->mail($message)) {
		// Success.
		//dpm('Success');
	}
	else {
	  	// Failure.
		//dpm('Fail');
	}
}


// function stripe_custom_create_session($key , $value){
// 	$_SESSION['stripe_custom'][$key] = $value;
// //	$_SESSION['mymodule']['param1']
// 	return $_SESSION['stripe_custom'][$key];
// }


function lists_session($key, $value = NULL) {
  static $storage;
  if ($value) {
    $storage[$key] = $value ;
    $_SESSION['stripe_custom'][$key] = $value ;   // I use 'lists' in case some other module uses 'type' in $_SESSION
  }
  else if (empty($storage[$key]) && isset($_SESSION['stripe_custom'][$key])) {
    $storage[$key] = $_SESSION['stripe_custom'][$key];
  }
  return $storage[$key];
}

function stripe_custom_unset_session(){
	unset($_SESSION['stripe_custom']);
}


?>