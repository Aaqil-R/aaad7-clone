<?php
//Source from:  https://github.com/stripe/stripe-php
require('init.php');

function stripe_custom_init(){
// 	$date = '2016-11-01';
// 	$year = substr($date,0,strpos($date,'-'));



// 	$month = substr($date,strpos($date,'-')+1,strpos($date,'-',strpos($date,'-')));
	

// 	dpm($date);
// 	dpm($month);
// 	dpm($year);


// 	$date=date_create("2013-04-15");

// 	$test = date_format($date,"Y/m/d H:i:s");
// 	dpm($test);	
// //	dpm(date_format($date,"Y/m/d H:i:s"));

}

// function stripe_custom_webform_submission_insert($node, $submission){
// 	$contenttype = $node->type;
// 	if($contenttype == 'donations'){
// 		//Gather the submitted form Values
// 		foreach ($node->webform['components'] as $key => $field) 
// 		{
// 			switch ($field['form_key']) 
// 			{
// 				//first page details
// 				case 'select_an_amount':
// 					$select_an_amount = $submission->data[$key][0];
					
// 				break;
// 				case 'donation_type':
// 					$donation_type = $submission->data[$key][0];

// 				break;
// 				case 'other_amount':
// 					$other_amount = $submission->data[$key][0];

// 				break;
// 				//second page details
// 				case 'firstname':
// 					$firstname = $submission->data[$key][0];

// 				break;
// 				case 'lastname':
// 					$lastname = $submission->data[$key][0];

// 				break;
// 				case 'email':
// 					$email = $submission->data[$key][0];

// 				break;
// 				case 'card_number':
// 					$card_number = $submission->data[$key][0];

// 				break;
// 				case 'expiration_date':
// 					$expiration_date = $submission->data[$key][0];
// 					$date = date_create($expiration_date);
// 					$expiration_year = date_format($date,"Y");
// 					$expiration_month = date_format($date,"m");

// 				break;
// 				case 'cv_number':
// 					$cv_number = $submission->data[$key][0];
// 				break;
// 			}
// 		}
// 		//dpm($other_amount);
// 		//dpm($firstname);
// 		//dpm($lastname);
// 		//dpm($email);
// 		//dpm($card_number);
// 		//dpm($cv_number);


// 		//check for the submission type. 
// 	}
// }

function stripe_custom_webform_submission_presave($node, $submission){
//function test($node, $submission){
	$contenttype = $node->type;
	//Only donations webforms we are considering
	if($contenttype == 'donations'){
		//Gather the submitted form Values
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//first page details
				case 'select_an_amount':
					$select_an_amount = $submission->data[$key][0];
					
				break;
				case 'donation_type':
					$donation_type = $submission->data[$key][0];

				break;
				case 'other_amount':
					$other_amount = $submission->data[$key][0];

				break;
				//second page details
				case 'firstname':
					$firstname = $submission->data[$key][0];

				break;
				case 'lastname':
					$lastname = $submission->data[$key][0];

				break;
				case 'email':
					$email = $submission->data[$key][0];

				break;
				case 'card_number':
					$cardnumber = $submission->data[$key][0];

				break;
				case 'expiration_date':
					$expiration_date = $submission->data[$key][0];
					$date = date_create($expiration_date);
					$expiration_year = date_format($date,"Y");
					$expiration_month = date_format($date,"m");

				break;
				case 'cv_number':
					$cv_number = $submission->data[$key][0];

				break;
			}
		}

		//updating only the card value with the new value before saving to Database
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//chaing the card number
				case 'card_number':
					//masking the number
					$maskedcardnumber = maskstring($submission->data[$key][0]);
					$submission->data[$key][0] = $maskedcardnumber;
				break;
			}
		}

		//check the Payment type
		if($donation_type == 'Recurring'){
			//create the ID dynamically when creating a subscription plan
			$date1 = date('dmyHis',time());;
			$id = $firstname.$date1;
			$name_of_the_plan = $firstname.'-'.$date1; 

			//TODO: Change the amount and get it from the webform
			$val = create_plan($select_an_amount , $id , $name_of_the_plan);

			//check whether the Plan was created
			if($val == 0){
				dpm("Recurring plan created");
				//The plan is created Successfully. Subscribe the user to the plan here.
				//TODO : Create the subscriber here

				$card1['number'] = $cardnumber;
				$card1['exp_month'] = $expiration_month;
				$card1['exp_year'] = $expiration_year;
				$card1['cvc'] = $cv_number;

				//$email = 'pnamalan@gmail.com';
				$val1 = create_subscriber($id,$email,$card1);
				if($val1 == 0){
					dpm("recurring Subscriber subscribed Sucessfully");
				}
				else{
					//Plan is created successfully But subscriber is not saved to te plan
					dpm("recurring Subscriber not subscribed");
				}
			}
			else{
				//TODO : Update the DB with the error log.
				dpm("Recurring plan not created");
			}
		}
		//Create a one time payment
		else{
			//creating the card details
			$card1['number'] = $cardnumber;
			$card1['exp_month'] = $expiration_month;
			$card1['exp_year'] = $expiration_year;
			$card1['cvc'] = $cv_number;
			
			$var = create_onetime_patment($card,$select_an_amount);
			if($val1 == 0){
				dpm("One time payment added");
			}
			else{
				//One time plan Failes
				dpm("One time payment failed");
			}
		}
	}
}


function create_subscriber($plan , $email , $card){
	try {
		\Stripe\Stripe::setApiKey(get_api());

		$token = \Stripe\Token::create(array(
		  "card" => $card,
		));

		$customer = \Stripe\Customer::create(array(
		  "source" => $token,
		  "plan" => $plan,
		  "email" => $email)
		);
		return 0;
	} catch(\Stripe\Error\Card $e) {
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		return -1;
	} catch (\Stripe\Error\Base $e) {
		return -1;
	} catch (Exception $e) {
		return -1;
	}
}

function create_plan($amount , $id , $name){
	//TODO : When creating a new plan the amount must come from the webform submission
	try {
		//creating a new plan
		\Stripe\Stripe::setApiKey(get_api());

		$test = \Stripe\Plan::create(array(
		  "amount" => $amount,
		  "interval" => "month",
		  "name" => $name,
		  "currency" => "gbp",
		  "id" => $id)
		);
		return 0;
	} catch(\Stripe\Error\Card $e) {
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		return -1;
	} catch (\Stripe\Error\Base $e) {
		return -1;
	} catch (Exception $e) {
		return -1;
	}
}

function create_onetime_patment($card,$amount){
	try {
		//defining the api key 
		\Stripe\Stripe::setApiKey(get_api());

		//defining the charge details for one time payments
		$charge = \Stripe\Charge::create(array('card' => $card, 
												'amount' => $amount, 
												'currency' => 'gbp'));
		echo $charge;
		return 0;
	} catch(\Stripe\Error\Card $e) {
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		return -1;
	} catch (\Stripe\Error\Base $e) {
		return -1;
	} catch (Exception $e) {
		return -1;
	}
}

function maskstring($number){
	$count = strlen($number);
	for( $i=0; $i<$count-4 ; $i++){
		$number[$i] = 'X';
	}
	return $number;
}


//Setting the Api key of Stripe.
//Change it when setup to the live environment.
function get_api(){
	return "sk_test_cmi32OHLo1FuZ8RBKzBTvfPt";
}
?>