<?php
//Source from:  https://github.com/stripe/stripe-php
require('init.php');

function stripe_custom_init(){
}

function stripe_custom_webform_submission_insert($node, $submission){
	$contenttype = $node->type;
	if($contenttype == 'donations'){
		//Gather the submitted form Values
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//first page details
				case 'select_an_amount':
					$select_an_amount = $submission->data[$key][0];
					
				break;
				case 'donation_type':
					$donation_type = $submission->data[$key][0];

				break;
				case 'other_amount':
					$other_amount = $submission->data[$key][0];

				break;
				//second page details
				case 'firstname':
					$firstname = $submission->data[$key][0];

				break;
				case 'lastname':
					$lastname = $submission->data[$key][0];

				break;
				case 'email':
					$email = $submission->data[$key][0];

				break;
				case 'card_number':
					$card_number = $submission->data[$key][0];

				break;
				case 'expiration_date':
					$expiration_date = $submission->data[$key][0];

				break;
				case 'cv_number':
					$cv_number = $submission->data[$key][0];

				break;
				// case 'cardnumber':
				// 	$cardnumber = $submission->data[$key][0];
				// break;
				// case 'cardnumber':
				// 	$cardnumber = $submission->data[$key][0];
				// break;
			}
		}

		//dpm($select_an_amount);
		dpm($donation_type);
		//dpm($other_amount);
		//dpm($firstname);
		//dpm($lastname);
		//dpm($email);
		//dpm($card_number);
		//dpm($expiration_date);
		//dpm($cv_number);


		//check for the submission type. 
	}
}

//function stripe_custom_webform_submission_presave($node, $submission){
function test($node, $submission){
	$contenttype = $node->type;
	//Only donations webforms we are considering
	if($contenttype == 'donations'){
		//Gather the submitted form Values
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//first page details
				case 'select_an_amount':
					$select_an_amount = $submission->data[$key][0];
					
				break;
				case 'donation_type':
					$donation_type = $submission->data[$key][0];

				break;
				case 'other_amount':
					$other_amount = $submission->data[$key][0];

				break;
				//second page details
				case 'firstname':
					$firstname = $submission->data[$key][0];

				break;
				case 'lastname':
					$lastname = $submission->data[$key][0];

				break;
				case 'email':
					$email = $submission->data[$key][0];

				break;
				case 'card_number':
					$cardnumber = $submission->data[$key][0];

				break;
				case 'expiration_date':
					$expiration_date = $submission->data[$key][0];

				break;
				case 'cv_number':
					$cv_number = $submission->data[$key][0];

				break;
			}
		}

		//updating only the card value with the new value before saving to Database
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				//chaing the card number
				case 'card_number':
					//masking the number
					$maskedcardnumber = maskstring($submission->data[$key][0]);
					$submission->data[$key][0] = $maskedcardnumber;
				break;
			}
		}

		//check the Payment type
		if($donation_type == 'Recurring'){
			//create the ID dynamically when creating a subscription plan
			$date1 = date('dmyHis',time());;
			$id = $firstname.$date1;
			$name_of_the_plan = $firstname.'-'.$date1; 

			//TODO: Change the amount and get it from the webform
			$val = create_plan($select_an_amount , $id , $name_of_the_plan);

			//check whether the Plan was created
			if($val == 0){
				//The plan is created Successfully. Subscribe the user to the plan here.
				//TODO : Create the subscriber here

				$card1['number'] = $cardnumber;
				$card1['exp_month'] = 11;
				$card1['exp_year'] = 2016;
				$card1['cvc'] = $cv_number;

				$email = 'pnamalan@gmail.com';
				$val1 = create_subscriber($id,$email,$card1);
				//dpm($val1);
				if($val1 == 0){
					dpm("Subscribed Sucessfully");
				}
				else{
					//Plan is created successfully But subscriber is not saved to te plan
				}
			}
			else{
				//TODO : Update the DB with the error log.
			}
		}
		//Create a one time payment
		else{
			//creating the card details
			$card1['number'] = $cardnumber;
			$card1['exp_month'] = 11;
			$card1['exp_year'] = 2016;
			$card1['cvc'] = $cv_number;
			
			$var = create_onetime_patment($card,$select_an_amount);
			if($val1 == 0){
				dpm("One time payment added");
			}
			else{
				//One time plan Failes
			}
		}
	}
}


function create_subscriber($plan , $email , $card){
	try {
		\Stripe\Stripe::setApiKey(get_api());

		$token = \Stripe\Token::create(array(
		  "card" => $card,
		));

		$customer = \Stripe\Customer::create(array(
		  "source" => $token,
		  "plan" => $plan,
		  "email" => $email)
		);
		return 0;
	} catch(\Stripe\Error\Card $e) {
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		return -1;
	} catch (\Stripe\Error\Base $e) {
		return -1;
	} catch (Exception $e) {
		return -1;
	}
}

function create_plan($amount , $id , $name){
	//TODO : When creating a new plan the amount must come from the webform submission
	try {
		//creating a new plan
		\Stripe\Stripe::setApiKey(get_api());

		$test = \Stripe\Plan::create(array(
		  "amount" => $amount,
		  "interval" => "month",
		  "name" => $name,
		  "currency" => "usd",
		  "id" => $id)
		);
		return 0;
	} catch(\Stripe\Error\Card $e) {
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		return -1;
	} catch (\Stripe\Error\Base $e) {
		return -1;
	} catch (Exception $e) {
		return -1;
	}
}

function create_onetime_patment($card,$amount){
	try {
		//defining the api key 
		\Stripe\Stripe::setApiKey(get_api());

		//defining the charge details for one time payments
		$charge = \Stripe\Charge::create(array('card' => $card, 
												'amount' => $amount, 
												'currency' => 'usd'));
		echo $charge;
		return 0;
	} catch(\Stripe\Error\Card $e) {
		return -1;
	} catch (\Stripe\Error\RateLimit $e) {
		return -1;
	} catch (\Stripe\Error\InvalidRequest $e) {
		return -1;
	} catch (\Stripe\Error\Authentication $e) {
		return -1;
	} catch (\Stripe\Error\ApiConnection $e) {
		return -1;
	} catch (\Stripe\Error\Base $e) {
		return -1;
	} catch (Exception $e) {
		return -1;
	}
}

function stripe_custom_webform_submission_presave($node, $submission){
	if($contenttype == 'donations'){
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				case 'firstname':
					$firstname = $submission->data[$key][0];
				break;
				case 'amount':
					$amount = $submission->data[$key][0];
				break;
			}
		}

		//updating it with new values
		foreach ($node->webform['components'] as $key => $field) 
		{
			switch ($field['form_key']) 
			{
				case 'firstname':
					$submission->data[$key][0] = 'Testing name';
				break;
				case 'amount':
					//masking the number
					$number = maskstring($submission->data[$key][0]);
					$submission->data[$key][0] = $number;
				break;
			}
		}
	}
}

function maskstring($number){
	$count = strlen($number);
	for( $i=0; $i<$count-4 ; $i++){
		$number[$i] = 'X';
	}
	return $number;
}

//not calling this at the moment.
function FormatCreditCard($cc)
{    // Clean out extra data that might be in the cc
    $cc = str_replace(array('-',' '),'',$cc);
    // Get the CC Length
    $cc_length = strlen($cc);
    // Initialize the new credit card to contian the last four digits
    $newCreditCard = substr($cc,-4);
    // Walk backwards through the credit card number and add a dash after every fourth digit
    for($i=$cc_length-5;$i>=0;$i--){
        // If on the fourth character add a dash
        if((($i+1)-$cc_length)%4 == 0){
            $newCreditCard = '-'.$newCreditCard;
        }
        // Add the current character to the new credit card
        $newCreditCard = $cc[$i].$newCreditCard;
    }
    // Return the formatted credit card number
    return $newCreditCard;
}

//Setting the Api key of Stripe.
//Change it when setup to the live environment.
function get_api(){
	return "sk_test_cmi32OHLo1FuZ8RBKzBTvfPt";
}
?>