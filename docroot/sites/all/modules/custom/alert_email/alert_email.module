<?php

function alert_email_init(){
	//getusers();
	// $currenttime = time();
	// $currentdate = date('d',$currenttime);

	// //call the getusers to send the emais in the cron run
	// //getusers();

	// //get the croun count
	// $query = db_select('email_counter', 'n');
	// $query->condition('ID', 1, '=');
	// $query->fields('n',array('number'));
	// $result = $query->execute();
 //  	// if ($record = $result->fetchAssoc())
 //   //  {	
 //   //  	dpm($record['number']);
 //   //  }
 //    $record = $result->fetchAssoc();
 //    dpm($record['number']);
	// //if the cron count is divisible by 4 then send the mail
 //    //if($record['number'] % 4 == 0)
 //    if(date('d',$record['number']) == $currentdate)
 //    {
 //    	dpm("on the current date");
 //    	//getusers();
 //    }
	// // //else skip sending the mail.
 // 	else{
 //   	 dpm("not same date");	
 // 	}

}

//returns the count of unpublished items for the given type
function get_unpublished_items($contenttype){
	$sql = "SELECT count(*) as totalcount
    		FROM node
    		WHERE type='".$contenttype."' and status=0";
	$result = db_query($sql);
	foreach ($result as $record) {
    	$counts = $record->totalcount;
    	return $counts;
  	}

	// $query = db_select('node', 'n');
	// $query->condition('type', $contenttype, '=');
	// $query->condition('status', '0', '=');
	// $query->fields('u',array('nid'));
	// $result = $query->execute();
 //  	if ($record = $result->fetchAssoc())
 //    {	
 //    	dpm($record['count']);
 //    }
}

//returns the content types as an array which have more than 0 unpublished items
function get_content_types(){
	//define content types to which we need to find the unpublished items
	$contenttypes = array("job_vacancy","events","courses","take_action","topic","my_voice_blog");
	$arrlength = count($contenttypes);

	//array which will store the content name and unpublished items
	$myarray = array();

	//array which will return the content names which needs the emails to be sent.
	$contentarray = array();

	//getting each content type and gathering the unpublished items for each content type. 
	//myarray returns an array with the content and unpublished items
	for($x = 0; $x < $arrlength; $x++) {
    	$unpublished = get_unpublished_items($contenttypes[$x]);
    	$myarray[$contenttypes[$x]] = $unpublished ;
	}

	//checking the contents which have unpublished items.
	foreach ($myarray as $contenttype => $number) {
		if($number > 0){
			$contentarray[$contenttype] = $contenttype ; 
		}
	}
	return $contentarray;
}

//returns the email address of the users in an array who are in the given role
function get_email_address($role){
	//creating an array which will store the email addresses of the user
	$emailaddresses = array();

	//selecting the users for a given role and getting their emails
	$sql = "SELECT users.name as name , users.mail as emails
			FROM role , users_roles , users 
			WHERE role.rid = users_roles.rid and users_roles.uid = users.uid and users.status = 1 and role.name = '".$role."'";
	$result = db_query($sql);
	foreach ($result as $record) {
		$name = $record->name;
    	$email = $record->emails;
 		$emailaddresses[$name] = $email ;
	}
	return $emailaddresses;
}

//returns the user roles as an array of the given content type
function get_user_roles($contenttype){
	$userrolearray = array();
	switch ($contenttype) {
		//add the new contents and the roles to which we need to send mails here
		case 'job_vacancy':
			array_push($userrolearray, 'HR approver');
			break;
		
		case 'events':
			array_push($userrolearray, 'Events approver');
			break;

		case 'courses':
			array_push($userrolearray, 'Training Approver','Project Development Approver');
			break;

		case 'take_action':
			array_push($userrolearray, 'The Fundraising Team Approver');
			break;
		
		case 'topic':
			array_push($userrolearray, 'Digital and Comms Approver');
			break;

		case 'my_voice_blog':
			array_push($userrolearray, 'my Voice team Approver');
			break;

		default:
			break;
	}
	return $userrolearray;
}

function getusers(){
	$contents = get_content_types();
	foreach ($contents as $type => $contentname) 
	{
		$userroles = get_user_roles($contentname);
		foreach ($userroles as $id) 
		{
			$emails = get_email_address($id);
			foreach ($emails as $email) {
				//call the function to create mail here
				create_mails($email,$contentname);
			}
		}
		//create_newmail($contentname);
	}
}

//new function
function create_mails($email,$contentname){
//swtich case and changing the link
	$link = '';
	$content = '';
	switch ($contentname) {
		//add the new contents and the roles to which we need to send mails here
		case 'job_vacancy':
			$link = '/vacancy-approval';
			$content = 'vacancies';
			break;
		
		case 'events':
			$link = '/event-approval';
			$content = 'events';
			break;

		case 'courses':
			$link = '/courses-approval';
			$content = 'courses';
			break;

		case 'take_action':
			$link = '/takeaction-approval';
			$content = 'take action';
			break;
		
		case 'topic':
			$link = '/topic-approval';
			$content = 'topic';
			break;

		case 'my_voice_blog':
			$link = '/myvoice-approval';
			$content = 'my voice blogs';
			break;

		default:
			break;
	}

	$var = 'http://'.$_SERVER['HTTP_HOST'];
	$mailbody = 'There are some contents waiting for the approval. Please visit them by clicking the following URL. '.$var.$link;
	
	$my_module = 'alert_email';
	$my_mail_token = 'bar';
	$from = variable_get('system_mail', 'ambitiousaboutautism.org.uk');	
	$message = array(
	  'id' => $my_module . '_' . $my_mail_token,
	  'to' => $email,
	  'subject' => 'Pending Approvals for '.$content,
	  'body' => $mailbody,
	  'headers' => array(
	    'From' => $from,
	    'Sender' => $from,
	    'Return-Path' => $from,
	  ),
	);
	$system = drupal_mail_system($my_module, $my_mail_token);

	// The format function must be called before calling the mail function. 
	//$message = $system->format($message);
	//dpm($message);
	if ($system->mail($message)) {
	  // Success.
		//dpm('Sucess');
	}
	else {
	  // Failure.
		//dpm('Fail');
	}
}

//Function to create the mails
//test function
function create_newmail($contenttype){

	$link = '';
	$content = '';
	switch ($contenttype) {
		//add the new contents and the roles to which we need to send mails here
		case 'job_vacancy':
			$link = '/vacancy-approval';
			$content = ' vacancies';
			break;
		
		case 'events':
			$link = '/event-approval';
			$content = ' events';
			break;

		case 'courses':
			$link = '/courses-approval';
			$content = ' courses';
			break;

		case 'take_action':
			$link = '/takeaction-approval';
			$content = ' take action';
			break;
		
		case 'topic':
			$link = '/topic-approval';
			$content = ' topic';
			break;

		case 'my_voice_blog':
			$link = '/myvoice-approval';
			$content = ' my voice blogs';
			break;
		default:
			# code...
			break;
	}

	$var = 'http://'.$_SERVER['HTTP_HOST'];
	$mailbody = 'There are some contents waiting for the approval. Please visit them by clicking the following URL.'." ".$var.$link;
	
	$my_module = 'alert_email';
	$my_mail_token = 'bar';
	$from = variable_get('system_mail', 'ambitiousaboutautism.org.uk');	
	$message = array(
	  'id' => $my_module . '_' . $my_mail_token,
	  'to' => 'pnamalan@gmail.com',
	  'subject' => 'Pending Approvals for '.$content,
	  'body' => $mailbody,
	  'headers' => array(
	    'From' => $from,
	    'Sender' => $from,
	    'Return-Path' => $from,
	  ),
	);
	$system = drupal_mail_system($my_module, $my_mail_token);

	// The format function must be called before calling the mail function. 
	//$message = $system->format($message);
	dpm($message);
	if ($system->mail($message)) {
	  // Success.
		dpm('Sucess');
	}
	else {
	  // Failure.
		dpm('Fail');
	}
}

function alert_email_cron(){
	//defining the current date
	$currenttime = time();
	$currentdate = date('d',$currenttime);

	//get the croun count
	$query = db_select('email_counter', 'n');
	$query->condition('ID', 1, '=');
	$query->fields('n',array('number'));
	$result = $query->execute();
    $record = $result->fetchAssoc();

    //dpm($record['number']);
	//checking the result date and whether the current date are the same
	if(date('d',$record['number']) != $currentdate)
    {
    	//sending the mails to the users
    	getusers();
    }
	
    //code to increase the counter and updating the database with the new count 
  	$valuetest = time() ; 
    $num_updated = db_update('email_counter') 
    ->fields(array(
      'number' => $valuetest,
    ))
    ->condition('ID',1, '=')
    ->execute();
	//end of the update code
}

?>